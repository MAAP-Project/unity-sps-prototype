
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.unity-sps-hysds-cluster.helm_release.grq2-es will be created
  + resource "helm_release" "grq2-es" {
      + atomic                     = false
      + chart                      = "elasticsearch"
      + cleanup_on_fail            = false
      + create_namespace           = false
      + dependency_update          = false
      + disable_crd_hooks          = false
      + disable_openapi_validation = false
      + disable_webhooks           = false
      + force_update               = false
      + id                         = (known after apply)
      + lint                       = false
      + manifest                   = (known after apply)
      + max_history                = 0
      + metadata                   = (known after apply)
      + name                       = "grq2-es"
      + namespace                  = "unity-sps"
      + pass_credentials           = false
      + recreate_pods              = false
      + render_subchart_notes      = true
      + replace                    = false
      + repository                 = "https://helm.elastic.co"
      + reset_values               = false
      + reuse_values               = false
      + skip_crds                  = false
      + status                     = "deployed"
      + timeout                    = 300
      + values                     = [
          + <<-EOT
                "antiAffinity": "soft"
                "clusterHealthCheckParams": "wait_for_status=yellow&timeout=1s"
                "clusterName": "grq-es"
                "esConfig":
                  "elasticsearch.yml": |
                    http.cors.enabled : true
                    http.cors.allow-origin: "*"
                    http.port: 9201
                "esJavaOpts": "-Xmx512m -Xms512m"
                "httpPort": 9201
                "lifecycle":
                  "postStart":
                    "exec":
                      "command":
                      - "bash"
                      - "-c"
                      - |
                        #!/bin/bash
                        ES_URL=http://localhost:9201
                        while [[ "$(curl -s -o /dev/null -w '%{http_code}\n' $ES_URL)" != "200" ]]; do sleep 1; done
                
                        grq_es_template=$(curl -s https://raw.githubusercontent.com/hysds/grq2/develop/config/es_template.json)
                        template=$(echo ${grq_es_template} | sed 's/{{ prefix }}/grq/;s/{{ alias }}/grq/')
                        curl -X PUT "$ES_URL/_template/grq" -H 'Content-Type: application/json' -d "${template}"
                
                        ingest_pipeline=$(curl -s https://raw.githubusercontent.com/hysds/grq2/develop/config/ingest_pipeline.json)
                        curl -X PUT "$ES_URL/_ingest/pipeline/dataset_pipeline" -H 'Content-Type: application/json' -d "${ingest_pipeline}"
                "masterService": "grq-es"
                "replicas": 1
                "resources":
                  "limits":
                    "cpu": "250m"
                    "memory": "50Mi"
                  "requests":
                    "cpu": "250m"
                    "memory": "50Mi"
                "service":
                  "nodePort": null
                  "type": "LoadBalancer"
                "transportPort": 9301
                "volumeClaimTemplate":
                  "accessModes":
                  - "ReadWriteOnce"
                  "resources":
                    "requests":
                      "storage": "5Gi"
                  "storageClassName": "gp2"
            EOT,
        ]
      + verify                     = false
      + version                    = "7.9.3"
      + wait                       = true
      + wait_for_jobs              = false
    }

  # module.unity-sps-hysds-cluster.helm_release.mozart-es will be created
  + resource "helm_release" "mozart-es" {
      + atomic                     = false
      + chart                      = "elasticsearch"
      + cleanup_on_fail            = false
      + create_namespace           = false
      + dependency_update          = false
      + disable_crd_hooks          = false
      + disable_openapi_validation = false
      + disable_webhooks           = false
      + force_update               = false
      + id                         = (known after apply)
      + lint                       = false
      + manifest                   = (known after apply)
      + max_history                = 0
      + metadata                   = (known after apply)
      + name                       = "mozart-es"
      + namespace                  = "unity-sps"
      + pass_credentials           = false
      + recreate_pods              = false
      + render_subchart_notes      = true
      + replace                    = false
      + repository                 = "https://helm.elastic.co"
      + reset_values               = false
      + reuse_values               = false
      + skip_crds                  = false
      + status                     = "deployed"
      + timeout                    = 300
      + values                     = [
          + <<-EOT
                "antiAffinity": "soft"
                "clusterHealthCheckParams": "wait_for_status=yellow&timeout=1s"
                "clusterName": "mozart-es"
                "esConfig":
                  "elasticsearch.yml": |
                    http.cors.enabled : true
                    http.cors.allow-origin: "*"
                "esJavaOpts": "-Xmx512m -Xms512m"
                "httpPort": 9200
                "lifecycle":
                  "postStart":
                    "exec":
                      "command":
                      - "bash"
                      - "-c"
                      - |
                        #!/bin/bash
                        ES_URL=http://localhost:9200
                        while [[ "$(curl -s -o /dev/null -w '%{http_code}\n' $ES_URL)" != "200" ]]; do sleep 1; done
                        mozart_es_template=$(curl -s https://raw.githubusercontent.com/hysds/mozart/develop/configs/es_template.json)
                        for idx in "containers" "job_specs" "hysds_io"; do
                          template=$(echo ${mozart_es_template} | sed "s/{{ index }}/${idx}/")
                          curl -X PUT "$ES_URL/_template/${idx}" -H 'Content-Type: application/json' -d "${template}" >/dev/null
                        done
                
                        hysds_io_mozart=$(curl -s https://raw.githubusercontent.com/hysds/mozart/develop/configs/hysds_ios.mapping)
                        curl -X PUT "$ES_URL/_template/hysds_ios-mozart?pretty" -H 'Content-Type: application/json' -d '${hysds_io_mozart}'
                
                        user_rules_mozart=$(curl -s https://raw.githubusercontent.com/hysds/mozart/develop/configs/user_rules_job.mapping)
                        curl -X PUT "$ES_URL/user_rules-mozart?pretty" -H 'Content-Type: application/json' -d "${user_rules_mozart}"
                
                        hysds_io_grq=$(curl -s https://raw.githubusercontent.com/hysds/grq2/develop/config/hysds_ios.mapping)
                        curl -X PUT "$ES_URL/hysds_ios-grq?pretty"  -H 'Content-Type: application/json' -d "${hysds_io_grq}"
                
                        user_rules_grq=$(curl -s https://raw.githubusercontent.com/hysds/grq2/develop/config/user_rules_dataset.mapping)
                        curl -X PUT "$ES_URL/user_rules-grq?pretty" -H 'Content-Type: application/json' -d "${user_rules_grq}"
                "masterService": "mozart-es"
                "replicas": 1
                "resources":
                  "limits":
                    "cpu": "250m"
                    "memory": "50Mi"
                  "requests":
                    "cpu": "250m"
                    "memory": "50Mi"
                "service":
                  "nodePort": null
                  "type": "LoadBalancer"
                "transportPort": 9300
                "volumeClaimTemplate":
                  "accessModes":
                  - "ReadWriteOnce"
                  "resources":
                    "requests":
                      "storage": "5Gi"
                  "storageClassName": "gp2"
            EOT,
        ]
      + verify                     = false
      + version                    = "7.9.3"
      + wait                       = true
      + wait_for_jobs              = false
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.aws-credentials will be created
  + resource "kubernetes_config_map" "aws-credentials" {
      + data = {
          + "aws-credentials" = <<-EOT
                [default]
                aws_access_key_id = hysds
                aws_secret_access_key = password
            EOT
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "aws-credentials"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.celeryconfig will be created
  + resource "kubernetes_config_map" "celeryconfig" {
      + data = {
          + "celeryconfig.py" = <<-EOT
                broker_url = "amqp://guest:guest@rabbitmq:5672//"
                result_backend = "redis://redis:6379"
                
                task_serializer = "msgpack"
                result_serializer = "msgpack"
                accept_content = ["msgpack"]
                
                task_acks_late = True
                result_expires = 86400
                worker_prefetch_multiplier = 1
                
                event_serializer = "msgpack"
                worker_send_task_events = True
                task_send_sent_event = True
                task_track_started = True
                
                task_queue_max_priority = 10
                
                task_reject_on_worker_lost = True
                
                broker_heartbeat = 120
                broker_heartbeat_checkrate = 2
                
                broker_pool_limit = None
                broker_transport_options = {"confirm_publish": True}
                
                imports = [
                    "hysds.task_worker",
                    "hysds.job_worker",
                    "hysds.orchestrator",
                ]
                
                CELERY_SEND_TASK_ERROR_EMAILS = False
                ADMINS = (("{{ ADMIN_NAME }}", "{{ ADMIN_EMAIL }}"),)
                SERVER_EMAIL = "{{ HOST_STRING }}"
                
                HYSDS_HANDLE_SIGNALS = False
                HYSDS_JOB_STATUS_EXPIRES = 86400
                
                BACKOFF_MAX_VALUE = 64
                BACKOFF_MAX_TRIES = 10
                
                HARD_TIME_LIMIT_GAP = 300
                
                PYMONITOREDRUNNER_CFG = {
                    "rabbitmq": {
                        "hostname": "{{ MOZART_RABBIT_PVT_IP }}",
                        "port": 5672,
                        "queue": "stdouterr",
                    },
                    "StreamObserverFileWriter": {
                        "stdout_filepath": "_stdout.txt",
                        "stderr_filepath": "_stderr.txt",
                    },
                    "StreamObserverMessenger": {"send_interval": 1},
                }
                
                MOZART_URL = "https://mozart:8888/mozart/"
                MOZART_REST_URL = "http://mozart:8888/api/v0.1"
                JOBS_ES_URL = "http://mozart-es:9200"
                JOBS_PROCESSED_QUEUE = "jobs_processed"
                USER_RULES_JOB_QUEUE = "user_rules_job"
                ON_DEMAND_JOB_QUEUE = "on_demand_job"
                USER_RULES_JOB_INDEX = "user_rules-mozart"
                STATUS_ALIAS = "job_status"
                
                TOSCA_URL = "https://{{ GRQ_PVT_IP }}/search/"
                GRQ_URL = "http://grq2:8878"
                GRQ_REST_URL = "http://grq2:8878/api/v0.1"
                GRQ_UPDATE_URL = "http://grq2:8878/api/v0.1/grq/dataset/index"
                
                
                GRQ_AWS_ES = False
                GRQ_ES_HOST = "grq-es"
                GRQ_ES_PORT = 9201
                GRQ_ES_PROTOCOL = "http"
                GRQ_ES_URL = "%s://%s:%d" % (GRQ_ES_PROTOCOL, GRQ_ES_HOST, GRQ_ES_PORT)
                
                
                DATASET_PROCESSED_QUEUE = "dataset_processed"
                USER_RULES_DATASET_QUEUE = "user_rules_dataset"
                ON_DEMAND_DATASET_QUEUE = "on_demand_dataset"
                USER_RULES_DATASET_INDEX = "user_rules-grq"
                DATASET_ALIAS = "grq"
                
                HYSDS_IOS_MOZART = "hysds_ios-mozart"
                HYSDS_IOS_GRQ = "hysds_ios-grq"
                
                USER_RULES_TRIGGER_QUEUE = "user_rules_trigger"
                
                PROCESS_EVENTS_TASKS_QUEUE = "process_events_tasks"
                
                METRICS_ES_URL = "http://{{ METRICS_ES_PVT_IP }}:9200"
                
                # REDIS_JOB_STATUS_URL = "redis://:{{ MOZART_REDIS_PASSWORD }}@{{ MOZART_REDIS_PVT_IP }}"
                REDIS_JOB_STATUS_URL = "redis://redis:6379"
                REDIS_JOB_STATUS_KEY = "logstash"
                REDIS_JOB_INFO_URL = "redis://redis:6379"
                REDIS_JOB_INFO_KEY = "logstash"
                REDIS_INSTANCE_METRICS_URL = (
                    "redis://:{{ METRICS_REDIS_PASSWORD }}@{{ METRICS_REDIS_PVT_IP }}"
                )
                REDIS_INSTANCE_METRICS_KEY = "logstash"
                # REDIS_UNIX_DOMAIN_SOCKET = "unix://:{{ MOZART_REDIS_PASSWORD }}@/tmp/redis.sock"
                REDIS_UNIX_DOMAIN_SOCKET = "unix://:/tmp/redis.sock"
                
                WORKER_CONTIGUOUS_FAILURE_THRESHOLD = 10
                WORKER_CONTIGUOUS_FAILURE_TIME = 5.0
                
                # ROOT_WORK_DIR = "/data/work"
                ROOT_WORK_DIR = "/private/tmp/data/work"
                WEBDAV_URL = None
                WEBDAV_PORT = 8085
                
                WORKER_MOUNT_BLACKLIST = [
                    "/dev",
                    "/etc",
                    "/lib",
                    "/proc",
                    "/usr",
                    "/var",
                ]
                
                CONTAINER_REGISTRY = "ghcr.io/unity-sds/unity-sps-prototype"
                
                AWS_REGION = "{{ AWS_REGION }}"
            EOT
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "celeryconfig"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.cwl-workflow-utils will be created
  + resource "kubernetes_config_map" "cwl-workflow-utils" {
      + data = {
          + "download_dir_from_s3.cwl"       = <<-EOT
                #!/usr/bin/env cwl-runner
                
                cwlVersion: v1.0
                class: CommandLineTool
                label: Tool that downloads recursively an S3 URL into a local directory
                doc: Requires valid AWS credentials as input arguments
                
                $namespaces:
                  cwltool: http://commonwl.org/cwltool#
                hints:
                  "cwltool:Secrets":
                    secrets:
                      - aws_access_key_id
                      - aws_secret_access_key
                      - aws_session_token
                  DockerRequirement:
                    dockerPull: pymonger/aws-cli
                requirements:
                  InitialWorkDirRequirement:
                    listing:
                      - entryname: .aws/credentials
                        entry: |
                          [default]
                          output = json
                          aws_region = $(inputs.aws_region)
                          aws_access_key_id = $(inputs.aws_access_key_id)
                          aws_secret_access_key = $(inputs.aws_secret_access_key)
                          aws_session_token = $(inputs.aws_session_token)
                
                baseCommand: [aws]
                arguments: [
                  "s3",
                  "cp",
                  "--recursive",
                  "$(inputs.source_s3_folder)/$(inputs.source_s3_subdir)",
                  "$(inputs.source_s3_subdir)"
                ]
                
                inputs:
                  aws_region: string
                  aws_access_key_id: string
                  aws_secret_access_key: string
                  aws_session_token: string
                  source_s3_folder:
                    type: string
                  source_s3_subdir:
                    type: string
                outputs:
                  stdout_file:
                    type: stdout
                  stderr_file:
                    type: stderr
                  target_local_subdir:
                    type: Directory
                    outputBinding:
                      glob: "$(inputs.source_s3_subdir)"
                stdout: stdout_download_dir_from_s3.txt
                stderr: stderr_download_dir_from_s3.txt
                
            EOT
          + "download_dir_from_s3_job.yml"   = <<-EOT
                source_s3_folder: s3://sds-test-bucket/test/dumby-product-20210622191038567000_1
                source_s3_subdir: dumby-product-20210622191038567000_1
                aws_access_key_id: .......
                aws_secret_access_key: ...........
                aws_session_token: ..............
            EOT
          + "download_file_from_s3.cwl"      = <<-EOT
                #!/usr/bin/env cwl-runner
                
                cwlVersion: v1.0
                class: CommandLineTool
                label: Tool that downloads a file from S3 into the local system
                doc: Requires valid AWS credentials as input arguments
                
                $namespaces:
                  cwltool: http://commonwl.org/cwltool#
                hints:
                  "cwltool:Secrets":
                    secrets:
                      - aws_region
                      - aws_access_key_id
                      - aws_secret_access_key
                      - aws_session_token
                  DockerRequirement:
                    dockerPull: pymonger/aws-cli
                requirements:
                  InitialWorkDirRequirement:
                    listing:
                      - entryname: .aws/credentials
                        entry: |
                          [default]
                          output = json
                          region = $(inputs.aws_region)
                          aws_access_key_id = $(inputs.aws_access_key_id)
                          aws_secret_access_key = $(inputs.aws_secret_access_key)
                          aws_session_token = $(inputs.aws_session_token)
                
                baseCommand: [aws]
                arguments: [
                  "s3",
                  "cp",
                  "$(inputs.source_s3_folder)/$(inputs.source_s3_filename)",
                  "$(inputs.source_s3_filename)"
                ]
                
                inputs:
                  source_s3_folder:
                    type: string
                  source_s3_filename:
                    type: string
                  aws_region: string
                  aws_access_key_id: string
                  aws_secret_access_key: string
                  aws_session_token: string
                outputs:
                  stdout_file:
                    type: stdout
                  stderr_file:
                    type: stderr
                  target_local_filename:
                    type: File
                    outputBinding:
                      glob: "$(inputs.source_s3_filename)"
                stdout: stdout_download_file_from_s3.txt
                stderr: stderr_download_file_from_s3.txt
                
            EOT
          + "download_file_from_s3_job.yml"  = <<-EOT
                source_s3_folder: s3://sds-test-bucket/test-src/dumby-product-20210622191038567000
                source_s3_filename: LC80101172015002LGN00_BQA.TIF
                aws_region: .....
                aws_access_key_id: ...........
                aws_secret_access_key: ........
                aws_session_token: ........
            EOT
          + "download_files_from_s3.cwl"     = <<-EOT
                #!/usr/bin/env cwl-runner
                
                cwlVersion: v1.0
                class: Workflow
                label: Workflow that downloads a list of files from S3 into the local system
                doc: Requires valid AWS credentials as input arguments
                
                $namespaces:
                  cwltool: http://commonwl.org/cwltool#
                hints:
                  "cwltool:Secrets":
                    secrets:
                      - aws_region
                      - aws_access_key_id
                      - aws_secret_access_key
                      - aws_session_token
                requirements:
                  SubworkflowFeatureRequirement: {}
                  ScatterFeatureRequirement: {}
                  InlineJavascriptRequirement: {}
                  StepInputExpressionRequirement: {}
                
                inputs:
                  source_s3_folders:
                    type: string[]
                  source_s3_filenames:
                    type: string[]
                  aws_region: string
                  aws_access_key_id: string
                  aws_secret_access_key: string
                  aws_session_token: string
                outputs:
                   target_local_filenames:
                     type: File[]
                     outputSource: [download_file_from_s3/target_local_filename]
                   stdout_files:
                     type: File[]
                     outputSource: [download_file_from_s3/stdout_file]
                   stderr_files:
                     type: File[]
                     outputSource: [download_file_from_s3/stderr_file]
                
                steps:
                  download_file_from_s3:
                    run: download_file_from_s3.cwl
                    scatter: [source_s3_filename, source_s3_folder]
                    scatterMethod: dotproduct
                    in:
                      source_s3_folder: source_s3_folders
                      source_s3_filename: source_s3_filenames
                      aws_region: aws_region
                      aws_access_key_id: aws_access_key_id
                      aws_secret_access_key: aws_secret_access_key
                      aws_session_token: aws_session_token
                    out:
                    - target_local_filename
                    - stdout_file
                    - stderr_file
            EOT
          + "download_files_from_s3_job.yml" = <<-EOT
                source_s3_folders: 
                - s3://unity-sps/sounder_sips/in/atms_science
                - s3://unity-sps/sounder_sips/in/ephatt
                source_s3_filenames: 
                - P1570515ATMSSCIENCEAAT16014215930700.PDS 
                - P1570011AAAAAAAAAAAAAT16014214620701.PDS
                aws_region: us-west-1
                aws_access_key_id: ........
                aws_secret_access_key: ............
                aws_session_token: ...........
            EOT
          + "upload_dir_to_s3.cwl"           = <<-EOT
                #!/usr/bin/env cwl-runner
                
                cwlVersion: v1.0
                class: CommandLineTool
                label: Tool the uploads recursively a local directory to S3
                doc: Requires valid AWS credentials as input arguments
                
                $namespaces:
                  cwltool: http://commonwl.org/cwltool#
                
                hints:
                  "cwltool:Secrets":
                    secrets:
                      - aws_access_key_id
                      - aws_secret_access_key
                      - aws_session_token
                  DockerRequirement:
                    dockerPull: pymonger/aws-cli
                
                requirements:
                  InitialWorkDirRequirement:
                    listing:
                      - entryname: .aws/credentials
                        entry: |
                          [default]
                          output = json
                          region = $(inputs.aws_region)
                          aws_access_key_id = $(inputs.aws_access_key_id)
                          aws_secret_access_key = $(inputs.aws_secret_access_key)
                          aws_session_token = $(inputs.aws_session_token)
                      - $(inputs.source_local_subdir)
                
                baseCommand: [aws]
                arguments: [
                  "s3",
                  "cp",
                  "--recursive",
                  "$(inputs.source_local_subdir.basename)",
                  "$(inputs.target_s3_folder)/$(inputs.source_local_subdir.basename)"
                ]
                
                inputs:
                  aws_region: string
                  aws_access_key_id: string
                  aws_secret_access_key: string
                  aws_session_token: string
                  source_local_subdir:
                    type: Directory
                  target_s3_folder:
                    type: string
                outputs:
                  target_s3_folder: 
                    type: string
                    outputBinding:
                      outputEval: $(inputs.target_s3_folder)
                  target_s3_subdir:
                    type: string
                    outputBinding:
                      outputEval: $(inputs.source_local_subdir.basename)
                  stdout_file:
                    type: stdout
                  stderr_file:
                    type: stderr
                stdout: upload_dir_to_s3_stdout.txt
                stderr: upload_dir_to_s3_stderr.txt
                
            EOT
          + "upload_dir_to_s3_job.yml"       = <<-EOT
                target_s3_subdir: 
                  class: Directory
                  path: dumby-product-20210622191038567000_1_processed
                target_s3_folder: s3://sds-test-bucket/test-processed
                aws_access_key_id: ..............
                aws_secret_access_key: ...............
                aws_session_token: ................
            EOT
          + "upload_dir_to_s3_stderr.txt"    = ""
          + "upload_dir_to_s3_stdout.txt"    = <<-EOT
                Completed 256.0 KiB/101.0 MiB (379.8 KiB/s) with 41 file(s) remainingCompleted 512.0 KiB/101.0 MiB (745.5 KiB/s) with 41 file(s) remainingCompleted 768.0 KiB/101.0 MiB (1.1 MiB/s) with 41 file(s) remaining  Completed 768.1 KiB/101.0 MiB (1.1 MiB/s) with 41 file(s) remaining  upload: out/spdc.pev to s3://unity-sps/sounder_sips/l1b/out/spdc.pev 
                Completed 768.1 KiB/101.0 MiB (1.1 MiB/s) with 40 file(s) remainingCompleted 1.0 MiB/101.0 MiB (1.4 MiB/s) with 40 file(s) remaining  Completed 1.3 MiB/101.0 MiB (1.7 MiB/s) with 40 file(s) remaining  Completed 1.3 MiB/101.0 MiB (1.5 MiB/s) with 40 file(s) remaining  upload: out/ShmMem.tds to s3://unity-sps/sounder_sips/l1b/out/ShmMem.tds
                Completed 1.3 MiB/101.0 MiB (1.5 MiB/s) with 39 file(s) remainingCompleted 1.3 MiB/101.0 MiB (1.4 MiB/s) with 39 file(s) remainingupload: out/l1b_config.xml to s3://unity-sps/sounder_sips/l1b/out/l1b_config.xml
                Completed 1.3 MiB/101.0 MiB (1.4 MiB/s) with 38 file(s) remainingCompleted 1.3 MiB/101.0 MiB (1.4 MiB/s) with 38 file(s) remainingupload: out/test_file03.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file03.nc.cas
                Completed 1.3 MiB/101.0 MiB (1.4 MiB/s) with 37 file(s) remainingCompleted 1.3 MiB/101.0 MiB (1.4 MiB/s) with 37 file(s) remainingupload: out/test_file02.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file02.nc.cas
                Completed 1.3 MiB/101.0 MiB (1.4 MiB/s) with 36 file(s) remainingCompleted 1.3 MiB/101.0 MiB (1.4 MiB/s) with 36 file(s) remainingupload: out/test_file04.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file04.nc.cas
                Completed 1.3 MiB/101.0 MiB (1.4 MiB/s) with 35 file(s) remainingCompleted 1.5 MiB/101.0 MiB (1.6 MiB/s) with 35 file(s) remainingCompleted 1.8 MiB/101.0 MiB (1.7 MiB/s) with 35 file(s) remainingCompleted 2.0 MiB/101.0 MiB (2.0 MiB/s) with 35 file(s) remainingCompleted 2.0 MiB/101.0 MiB (1.9 MiB/s) with 35 file(s) remainingCompleted 2.0 MiB/101.0 MiB (1.9 MiB/s) with 35 file(s) remainingupload: out/test_file06.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file06.nc.cas
                Completed 2.0 MiB/101.0 MiB (1.9 MiB/s) with 34 file(s) remainingupload: out/test_file05.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file05.nc.cas
                Completed 2.0 MiB/101.0 MiB (1.9 MiB/s) with 33 file(s) remainingCompleted 2.3 MiB/101.0 MiB (2.0 MiB/s) with 33 file(s) remainingCompleted 2.5 MiB/101.0 MiB (2.2 MiB/s) with 33 file(s) remainingCompleted 2.8 MiB/101.0 MiB (2.4 MiB/s) with 33 file(s) remainingCompleted 3.0 MiB/101.0 MiB (2.5 MiB/s) with 33 file(s) remainingCompleted 3.0 MiB/101.0 MiB (2.4 MiB/s) with 33 file(s) remainingupload: out/test_file07.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file07.nc.cas
                Completed 3.0 MiB/101.0 MiB (2.4 MiB/s) with 32 file(s) remainingCompleted 3.3 MiB/101.0 MiB (2.4 MiB/s) with 32 file(s) remainingCompleted 3.5 MiB/101.0 MiB (2.4 MiB/s) with 32 file(s) remainingCompleted 3.8 MiB/101.0 MiB (2.6 MiB/s) with 32 file(s) remainingCompleted 3.8 MiB/101.0 MiB (2.5 MiB/s) with 32 file(s) remainingupload: out/test_file08.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file08.nc.cas
                Completed 3.8 MiB/101.0 MiB (2.5 MiB/s) with 31 file(s) remainingCompleted 4.0 MiB/101.0 MiB (2.5 MiB/s) with 31 file(s) remainingCompleted 4.3 MiB/101.0 MiB (2.6 MiB/s) with 31 file(s) remainingCompleted 4.5 MiB/101.0 MiB (2.2 MiB/s) with 31 file(s) remainingCompleted 4.8 MiB/101.0 MiB (2.0 MiB/s) with 31 file(s) remainingCompleted 5.0 MiB/101.0 MiB (2.1 MiB/s) with 31 file(s) remainingCompleted 5.3 MiB/101.0 MiB (2.0 MiB/s) with 31 file(s) remainingCompleted 5.5 MiB/101.0 MiB (2.1 MiB/s) with 31 file(s) remainingCompleted 5.8 MiB/101.0 MiB (1.7 MiB/s) with 31 file(s) remainingCompleted 6.0 MiB/101.0 MiB (1.7 MiB/s) with 31 file(s) remainingCompleted 6.3 MiB/101.0 MiB (1.8 MiB/s) with 31 file(s) remainingCompleted 6.4 MiB/101.0 MiB (1.8 MiB/s) with 31 file(s) remainingupload: out/L1BMw_main.log to s3://unity-sps/sounder_sips/l1b/out/L1BMw_main.log
                Completed 6.4 MiB/101.0 MiB (1.8 MiB/s) with 30 file(s) remainingCompleted 6.6 MiB/101.0 MiB (1.8 MiB/s) with 30 file(s) remainingCompleted 6.7 MiB/101.0 MiB (1.8 MiB/s) with 30 file(s) remainingupload: out/out.mon to s3://unity-sps/sounder_sips/l1b/out/out.mon
                Completed 6.7 MiB/101.0 MiB (1.8 MiB/s) with 29 file(s) remainingCompleted 7.0 MiB/101.0 MiB (1.9 MiB/s) with 29 file(s) remainingCompleted 7.0 MiB/101.0 MiB (1.8 MiB/s) with 29 file(s) remainingupload: out/test_file10.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file10.nc.cas
                Completed 7.0 MiB/101.0 MiB (1.8 MiB/s) with 28 file(s) remainingCompleted 7.3 MiB/101.0 MiB (1.8 MiB/s) with 28 file(s) remainingCompleted 7.5 MiB/101.0 MiB (1.9 MiB/s) with 28 file(s) remainingCompleted 7.8 MiB/101.0 MiB (1.9 MiB/s) with 28 file(s) remainingCompleted 7.8 MiB/101.0 MiB (1.9 MiB/s) with 28 file(s) remainingupload: out/test_file12.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file12.nc.cas
                Completed 7.8 MiB/101.0 MiB (1.9 MiB/s) with 27 file(s) remainingCompleted 8.0 MiB/101.0 MiB (1.9 MiB/s) with 27 file(s) remainingCompleted 8.3 MiB/101.0 MiB (1.9 MiB/s) with 27 file(s) remainingCompleted 8.5 MiB/101.0 MiB (2.0 MiB/s) with 27 file(s) remainingCompleted 8.8 MiB/101.0 MiB (2.0 MiB/s) with 27 file(s) remainingCompleted 9.0 MiB/101.0 MiB (1.9 MiB/s) with 27 file(s) remainingCompleted 9.3 MiB/101.0 MiB (1.8 MiB/s) with 27 file(s) remainingCompleted 9.5 MiB/101.0 MiB (1.8 MiB/s) with 27 file(s) remainingCompleted 9.8 MiB/101.0 MiB (1.8 MiB/s) with 27 file(s) remainingCompleted 10.0 MiB/101.0 MiB (1.9 MiB/s) with 27 file(s) remainingCompleted 10.3 MiB/101.0 MiB (1.9 MiB/s) with 27 file(s) remainingCompleted 10.5 MiB/101.0 MiB (1.8 MiB/s) with 27 file(s) remainingCompleted 10.8 MiB/101.0 MiB (1.8 MiB/s) with 27 file(s) remainingCompleted 11.0 MiB/101.0 MiB (1.8 MiB/s) with 27 file(s) remainingCompleted 11.3 MiB/101.0 MiB (1.8 MiB/s) with 27 file(s) remainingCompleted 11.5 MiB/101.0 MiB (1.8 MiB/s) with 27 file(s) remainingCompleted 11.8 MiB/101.0 MiB (1.8 MiB/s) with 27 file(s) remainingCompleted 12.0 MiB/101.0 MiB (1.8 MiB/s) with 27 file(s) remainingCompleted 12.3 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 12.5 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 12.8 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 13.0 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 13.3 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 13.5 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 13.8 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 14.0 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 14.3 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 14.5 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 14.8 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 15.0 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 15.3 MiB/101.0 MiB (1.7 MiB/s) with 27 file(s) remainingCompleted 15.5 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 15.8 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 16.0 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 16.3 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 16.5 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 16.8 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 17.0 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 17.3 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 17.5 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 17.8 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 18.0 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 18.3 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 18.5 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 18.8 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 19.0 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 19.3 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 19.5 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 19.8 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 20.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 20.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 20.5 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 20.8 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 21.0 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 21.3 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 21.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 21.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 22.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 22.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 22.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 22.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 23.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 23.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 23.5 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 23.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 24.0 MiB/101.0 MiB (1.6 MiB/s) with 27 file(s) remainingCompleted 24.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 24.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 24.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 25.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 25.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 25.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 25.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 26.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 26.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 26.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 26.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 27.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 27.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 27.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 27.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 28.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 28.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 28.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 28.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 29.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 29.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 29.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 29.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 30.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 30.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 30.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 30.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 31.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 31.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 31.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 31.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 32.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 32.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 32.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 32.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 33.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 33.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 33.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 33.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 34.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 34.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 34.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 34.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 35.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 35.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 35.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 35.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 36.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 36.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 36.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 36.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 37.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 37.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 37.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 37.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 38.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 38.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 38.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 38.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 39.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 39.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 39.5 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 39.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 40.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 40.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 40.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 40.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 41.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 41.3 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 41.5 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 41.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 42.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 42.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 42.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 42.8 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 43.0 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 43.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 43.5 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 43.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 44.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 44.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 44.5 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 44.8 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 45.0 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 45.3 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 45.5 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 45.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 46.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 46.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 46.5 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 46.8 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 47.0 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 47.3 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 47.5 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 47.8 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 48.0 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 48.3 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 48.5 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 48.8 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 49.0 MiB/101.0 MiB (1.5 MiB/s) with 27 file(s) remainingCompleted 49.3 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 49.5 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 49.8 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 50.0 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 50.3 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 50.5 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 50.8 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 51.0 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 51.3 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingCompleted 51.3 MiB/101.0 MiB (1.4 MiB/s) with 27 file(s) remainingupload: out/test_file02.nc to s3://unity-sps/sounder_sips/l1b/out/test_file02.nc
                Completed 51.3 MiB/101.0 MiB (1.4 MiB/s) with 26 file(s) remainingCompleted 51.6 MiB/101.0 MiB (1.4 MiB/s) with 26 file(s) remainingCompleted 51.8 MiB/101.0 MiB (1.4 MiB/s) with 26 file(s) remainingCompleted 51.9 MiB/101.0 MiB (1.4 MiB/s) with 26 file(s) remainingupload: out/test_file07.nc to s3://unity-sps/sounder_sips/l1b/out/test_file07.nc
                Completed 51.9 MiB/101.0 MiB (1.4 MiB/s) with 25 file(s) remainingCompleted 52.2 MiB/101.0 MiB (1.4 MiB/s) with 25 file(s) remainingCompleted 52.4 MiB/101.0 MiB (1.4 MiB/s) with 25 file(s) remainingCompleted 52.7 MiB/101.0 MiB (1.4 MiB/s) with 25 file(s) remainingCompleted 52.9 MiB/101.0 MiB (1.4 MiB/s) with 25 file(s) remainingCompleted 53.2 MiB/101.0 MiB (1.4 MiB/s) with 25 file(s) remainingCompleted 53.2 MiB/101.0 MiB (1.4 MiB/s) with 25 file(s) remainingupload: out/test_file03.nc to s3://unity-sps/sounder_sips/l1b/out/test_file03.nc
                Completed 53.2 MiB/101.0 MiB (1.4 MiB/s) with 24 file(s) remainingCompleted 53.5 MiB/101.0 MiB (1.4 MiB/s) with 24 file(s) remainingCompleted 53.7 MiB/101.0 MiB (1.4 MiB/s) with 24 file(s) remainingCompleted 54.0 MiB/101.0 MiB (1.4 MiB/s) with 24 file(s) remainingCompleted 54.2 MiB/101.0 MiB (1.4 MiB/s) with 24 file(s) remainingCompleted 54.5 MiB/101.0 MiB (1.4 MiB/s) with 24 file(s) remainingCompleted 54.7 MiB/101.0 MiB (1.4 MiB/s) with 24 file(s) remainingCompleted 54.8 MiB/101.0 MiB (1.4 MiB/s) with 24 file(s) remainingupload: out/test_file06.nc to s3://unity-sps/sounder_sips/l1b/out/test_file06.nc
                Completed 54.8 MiB/101.0 MiB (1.4 MiB/s) with 23 file(s) remainingCompleted 55.0 MiB/101.0 MiB (1.4 MiB/s) with 23 file(s) remainingCompleted 55.0 MiB/101.0 MiB (1.4 MiB/s) with 23 file(s) remainingupload: out/test_file09.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file09.nc.cas
                Completed 55.0 MiB/101.0 MiB (1.4 MiB/s) with 22 file(s) remainingCompleted 55.3 MiB/101.0 MiB (1.4 MiB/s) with 22 file(s) remainingCompleted 55.3 MiB/101.0 MiB (1.4 MiB/s) with 22 file(s) remainingupload: out/test_file14.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file14.nc.cas
                Completed 55.3 MiB/101.0 MiB (1.4 MiB/s) with 21 file(s) remainingCompleted 55.5 MiB/101.0 MiB (1.4 MiB/s) with 21 file(s) remainingCompleted 55.8 MiB/101.0 MiB (1.4 MiB/s) with 21 file(s) remainingCompleted 56.0 MiB/101.0 MiB (1.4 MiB/s) with 21 file(s) remainingupload: out/test_file10.nc to s3://unity-sps/sounder_sips/l1b/out/test_file10.nc
                Completed 56.0 MiB/101.0 MiB (1.4 MiB/s) with 20 file(s) remainingCompleted 56.2 MiB/101.0 MiB (1.4 MiB/s) with 20 file(s) remainingCompleted 56.5 MiB/101.0 MiB (1.4 MiB/s) with 20 file(s) remainingCompleted 56.5 MiB/101.0 MiB (1.4 MiB/s) with 20 file(s) remainingupload: out/test_file16.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file16.nc.cas
                Completed 56.5 MiB/101.0 MiB (1.4 MiB/s) with 19 file(s) remainingCompleted 56.7 MiB/101.0 MiB (1.4 MiB/s) with 19 file(s) remainingCompleted 57.0 MiB/101.0 MiB (1.4 MiB/s) with 19 file(s) remainingCompleted 57.2 MiB/101.0 MiB (1.4 MiB/s) with 19 file(s) remainingCompleted 57.5 MiB/101.0 MiB (1.4 MiB/s) with 19 file(s) remainingupload: out/test_file04.nc to s3://unity-sps/sounder_sips/l1b/out/test_file04.nc
                Completed 57.5 MiB/101.0 MiB (1.4 MiB/s) with 18 file(s) remainingCompleted 57.7 MiB/101.0 MiB (1.4 MiB/s) with 18 file(s) remainingCompleted 57.7 MiB/101.0 MiB (1.4 MiB/s) with 18 file(s) remainingupload: out/test_file15.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file15.nc.cas
                Completed 57.7 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 58.0 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 58.2 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 58.5 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 58.7 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 59.0 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 59.2 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 59.5 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 59.7 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 60.0 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 60.2 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 60.5 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 60.7 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 61.0 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 61.2 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 61.5 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 61.7 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingCompleted 61.8 MiB/101.0 MiB (1.4 MiB/s) with 17 file(s) remainingupload: out/test_file05.nc to s3://unity-sps/sounder_sips/l1b/out/test_file05.nc
                Completed 61.8 MiB/101.0 MiB (1.4 MiB/s) with 16 file(s) remainingCompleted 62.0 MiB/101.0 MiB (1.4 MiB/s) with 16 file(s) remainingCompleted 62.0 MiB/101.0 MiB (1.4 MiB/s) with 16 file(s) remainingupload: out/test_file11.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file11.nc.cas
                Completed 62.0 MiB/101.0 MiB (1.4 MiB/s) with 15 file(s) remainingCompleted 62.3 MiB/101.0 MiB (1.4 MiB/s) with 15 file(s) remainingCompleted 62.3 MiB/101.0 MiB (1.4 MiB/s) with 15 file(s) remainingupload: out/test_file13.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file13.nc.cas
                Completed 62.3 MiB/101.0 MiB (1.4 MiB/s) with 14 file(s) remainingCompleted 62.5 MiB/101.0 MiB (1.4 MiB/s) with 14 file(s) remainingCompleted 62.8 MiB/101.0 MiB (1.4 MiB/s) with 14 file(s) remainingCompleted 62.8 MiB/101.0 MiB (1.4 MiB/s) with 14 file(s) remainingupload: out/test_file17.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file17.nc.cas
                Completed 62.8 MiB/101.0 MiB (1.4 MiB/s) with 13 file(s) remainingCompleted 63.0 MiB/101.0 MiB (1.4 MiB/s) with 13 file(s) remainingCompleted 63.3 MiB/101.0 MiB (1.4 MiB/s) with 13 file(s) remainingCompleted 63.5 MiB/101.0 MiB (1.4 MiB/s) with 13 file(s) remainingCompleted 63.8 MiB/101.0 MiB (1.4 MiB/s) with 13 file(s) remainingupload: out/test_file11.nc to s3://unity-sps/sounder_sips/l1b/out/test_file11.nc
                Completed 63.8 MiB/101.0 MiB (1.4 MiB/s) with 12 file(s) remainingCompleted 64.0 MiB/101.0 MiB (1.4 MiB/s) with 12 file(s) remainingCompleted 64.0 MiB/101.0 MiB (1.4 MiB/s) with 12 file(s) remainingupload: out/test_file18.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file18.nc.cas
                Completed 64.0 MiB/101.0 MiB (1.4 MiB/s) with 11 file(s) remainingCompleted 64.3 MiB/101.0 MiB (1.4 MiB/s) with 11 file(s) remainingCompleted 64.5 MiB/101.0 MiB (1.4 MiB/s) with 11 file(s) remainingCompleted 64.8 MiB/101.0 MiB (1.4 MiB/s) with 11 file(s) remainingCompleted 65.0 MiB/101.0 MiB (1.4 MiB/s) with 11 file(s) remainingCompleted 65.3 MiB/101.0 MiB (1.4 MiB/s) with 11 file(s) remainingCompleted 65.5 MiB/101.0 MiB (1.4 MiB/s) with 11 file(s) remainingCompleted 65.8 MiB/101.0 MiB (1.4 MiB/s) with 11 file(s) remainingCompleted 65.9 MiB/101.0 MiB (1.4 MiB/s) with 11 file(s) remainingupload: out/test_file08.nc to s3://unity-sps/sounder_sips/l1b/out/test_file08.nc
                Completed 65.9 MiB/101.0 MiB (1.4 MiB/s) with 10 file(s) remainingCompleted 66.2 MiB/101.0 MiB (1.4 MiB/s) with 10 file(s) remainingCompleted 66.2 MiB/101.0 MiB (1.4 MiB/s) with 10 file(s) remainingupload: out/test_file19.nc.cas to s3://unity-sps/sounder_sips/l1b/out/test_file19.nc.cas
                Completed 66.2 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 66.4 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 66.7 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 66.9 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 67.2 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 67.4 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 67.7 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 67.9 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 68.2 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 68.4 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 68.7 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 68.9 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 69.2 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingCompleted 69.3 MiB/101.0 MiB (1.4 MiB/s) with 9 file(s) remainingupload: out/test_file09.nc to s3://unity-sps/sounder_sips/l1b/out/test_file09.nc
                Completed 69.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 69.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 69.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 70.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 70.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 70.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 70.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 71.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 71.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 71.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 71.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 72.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 72.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 72.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 72.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 73.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 73.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 73.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 73.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 74.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 74.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 74.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 74.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 75.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 75.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 75.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 75.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 76.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 76.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 76.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 76.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 77.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 77.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 77.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 77.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 78.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 78.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 78.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 78.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 79.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 79.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 79.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 79.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 80.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 80.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 80.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 80.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 81.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 81.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 81.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 81.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 82.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 82.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 82.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 82.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 83.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 83.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 83.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 83.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 84.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 84.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 84.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 84.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 85.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 85.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 85.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 85.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 86.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 86.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 86.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 86.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 87.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 87.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 87.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 87.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 88.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 88.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 88.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 88.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 89.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 89.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 89.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 89.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 90.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 90.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 90.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 90.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 91.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 91.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 91.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 91.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 92.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 92.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 92.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 92.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 93.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 93.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 93.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 93.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 94.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 94.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 94.6 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 94.8 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 95.1 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 95.3 MiB/101.0 MiB (1.4 MiB/s) with 8 file(s) remainingCompleted 95.6 MiB/101.0 MiB (1.3 MiB/s) with 8 file(s) remainingCompleted 95.8 MiB/101.0 MiB (1.3 MiB/s) with 8 file(s) remainingCompleted 96.1 MiB/101.0 MiB (1.3 MiB/s) with 8 file(s) remainingCompleted 96.1 MiB/101.0 MiB (1.3 MiB/s) with 8 file(s) remainingupload: out/test_file12.nc to s3://unity-sps/sounder_sips/l1b/out/test_file12.nc
                Completed 96.1 MiB/101.0 MiB (1.3 MiB/s) with 7 file(s) remainingCompleted 96.4 MiB/101.0 MiB (1.3 MiB/s) with 7 file(s) remainingCompleted 96.6 MiB/101.0 MiB (1.3 MiB/s) with 7 file(s) remainingupload: out/test_file14.nc to s3://unity-sps/sounder_sips/l1b/out/test_file14.nc
                Completed 96.6 MiB/101.0 MiB (1.3 MiB/s) with 6 file(s) remainingCompleted 96.8 MiB/101.0 MiB (1.3 MiB/s) with 6 file(s) remainingCompleted 97.1 MiB/101.0 MiB (1.3 MiB/s) with 6 file(s) remainingCompleted 97.3 MiB/101.0 MiB (1.3 MiB/s) with 6 file(s) remainingCompleted 97.6 MiB/101.0 MiB (1.3 MiB/s) with 6 file(s) remainingCompleted 97.8 MiB/101.0 MiB (1.3 MiB/s) with 6 file(s) remainingCompleted 98.1 MiB/101.0 MiB (1.3 MiB/s) with 6 file(s) remainingCompleted 98.3 MiB/101.0 MiB (1.3 MiB/s) with 6 file(s) remainingCompleted 98.4 MiB/101.0 MiB (1.3 MiB/s) with 6 file(s) remainingupload: out/test_file16.nc to s3://unity-sps/sounder_sips/l1b/out/test_file16.nc
                Completed 98.4 MiB/101.0 MiB (1.3 MiB/s) with 5 file(s) remainingCompleted 98.5 MiB/101.0 MiB (1.3 MiB/s) with 5 file(s) remainingupload: out/test_file13.nc to s3://unity-sps/sounder_sips/l1b/out/test_file13.nc
                Completed 98.5 MiB/101.0 MiB (1.3 MiB/s) with 4 file(s) remainingCompleted 98.8 MiB/101.0 MiB (1.3 MiB/s) with 4 file(s) remainingCompleted 99.0 MiB/101.0 MiB (1.3 MiB/s) with 4 file(s) remainingCompleted 99.3 MiB/101.0 MiB (1.3 MiB/s) with 4 file(s) remainingCompleted 99.5 MiB/101.0 MiB (1.3 MiB/s) with 4 file(s) remainingCompleted 99.8 MiB/101.0 MiB (1.3 MiB/s) with 4 file(s) remainingCompleted 100.0 MiB/101.0 MiB (1.3 MiB/s) with 4 file(s) remainingCompleted 100.3 MiB/101.0 MiB (1.3 MiB/s) with 4 file(s) remainingCompleted 100.5 MiB/101.0 MiB (1.3 MiB/s) with 4 file(s) remainingCompleted 100.7 MiB/101.0 MiB (1.3 MiB/s) with 4 file(s) remainingupload: out/test_file15.nc to s3://unity-sps/sounder_sips/l1b/out/test_file15.nc
                Completed 100.7 MiB/101.0 MiB (1.3 MiB/s) with 3 file(s) remainingCompleted 100.9 MiB/101.0 MiB (1.3 MiB/s) with 3 file(s) remainingupload: out/test_file17.nc to s3://unity-sps/sounder_sips/l1b/out/test_file17.nc
                Completed 100.9 MiB/101.0 MiB (1.3 MiB/s) with 2 file(s) remainingCompleted 100.9 MiB/101.0 MiB (1.3 MiB/s) with 2 file(s) remainingupload: out/test_file19.nc to s3://unity-sps/sounder_sips/l1b/out/test_file19.nc
                Completed 100.9 MiB/101.0 MiB (1.3 MiB/s) with 1 file(s) remainingCompleted 101.0 MiB/101.0 MiB (1.3 MiB/s) with 1 file(s) remainingupload: out/test_file18.nc to s3://unity-sps/sounder_sips/l1b/out/test_file18.nc
            EOT
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "cwl-workflow-utils"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.cwl-workflows will be created
  + resource "kubernetes_config_map" "cwl-workflows" {
      + data = {
          + "README.md"                  = <<-EOT
                # Sounder SIPS Workflows
                This directory contains the CWL and supporting files needed to execute the designated Sounder SIPS L1a, L1b workflows.
                The workflows execute the most recent version of the real (conteinerized) L1A and L1B PGEs.
                
                ## Pre-requisites
                - Read/Write permissions to an S3 bucket pre-populated with the required input files. For example, Read/Write permissions to the S3 bucket "s3://unity-sps/" and "s3://unity-ads" in the AWS "jpl-mipl" account, where the Sounder SIPS input files have been staged.
                - Pre-download of the Sounder SIPS static data to a local directory:
                ```
                cd <any directory>
                aws s3 cp s3://unity-ads/sounder_sips/static_files/ ./SOUNDER_SIPS --profile <the AWS profile with the appropriate privileges>
                ```
                - A python virtual environment with the latest version of the CWL libraries installed. For example, such an environment can be created as follows:
                ```
                cd <any working directory>
                virtualenv cwl_venv
                source cwl_venv/bin/activate
                pip install cwltool cwl-runner
                ```
                - The latest version of the Sounder SIPS Docker containers built on or downloaded to the local laptop, which at this time is:
                  - unity-sds/sounder_sips_l1a_pge:r0.1.0
                  - unity-sds/sounder_sips_l1b_pge:r0.1.0
                
                
                ## Steps
                
                - Clone this repository and enter this directory:
                ```
                git clone https://github.com/unity-sds/unity-sps-workflows.git
                cd unity-sps-workflows/ 
                git checkout devel
                cd sounder_sips 
                ```
                
                - Renew the AWS credentials for which you have Read/Write permissions to the desired S3 bucket. For example:
                ```
                aws-login -pub
                ...
                Please choose the role you would like to assume:
                [0] jpl-mipl / power_user ---->....
                ...
                Credential file /Users/...../.aws/config has been successfully updated. To use you must specify the profile 'saml-pub'.
                ```
                
                - Activate the Python virtual environment:
                ```
                source <path to venv location>/env/bin/activate
                ```
                
                ## Latest Sounder SIPS L1A, L1B Workflows 
                
                The steps to execute the L1A and L1B workflows are practically the same.
                
                - Edit the file ssips_L1a_workflow_job_new.yml or ssips_L1b_workflow_job_new.yml which contains the specific user parameters used by the workflow:
                  - Adjust the value of _static_dir_ to the local directory where the Sounder SIPS static files were downloaded
                  - cut-and-paste the value of the AWS keys (_aws_access_key_id_, _aws_secret_access_key_, _aws_session_token_) from the values for the selected profile included in the AWS credential file _~/.aws/credentials_ .
                
                - Execute the workflow:
                ```
                cwl-runner --no-match-user --no-read-only ssips_L1a_workflow.cwl ssips_L1a_workflow.yml
                or:
                cwl-runner --no-match-user --no-read-only ssips_L1b_workflow.cwl ssips_L1b_workflow.yml
                ```
                - After the workflow completes, verify that fake output files have been created in the target S3 bucket s3://unity-sps/sounder_sips/l1a/out/ or s3://unity-sps/sounder_sips/l1b/out, respectively.
                
                ## Older Sounder SIPS L1a+L1b combined Workflow
                
                - Edit the file _ssips_L1a_L1b_workflow_job.yml_ which contains the specific user parameters used by the workflow:
                  - Adjust the value of _l1a_workflow_source_s3_folder_ to match your S3 input bucket (where the input test file is stored)
                  - Adjust the value of _l1a_workflow_target_s3_folder_ and _l1b_workflow_target_s3_folder_ to the desired S3 locations where the output files will be written  (the target S3 folder must exist, but the target S3 folders within it don't have to)
                  - cut-and-paste the value of the AWS keys (_workflow_aws_access_key_id_, _workflow_aws_secret_access_key_, _workflow_aws_session_token_) from the values for the selected profile included in the AWS credential file _~/.aws/credentials_ .
                
                - Execute the workflow:
                ```
                cwl-runner --no-match-user --no-read-only ssips_L1a_L1b_workflow.cwl ssips_L1a_L1b_workflow_job.yml
                ```
                - After the workflow completes, verify that fake L1a and L1b files have been created in the target S3 bucket and folders
            EOT
          + "l1a_package.cwl"            = <<-EOT
                cwlVersion: v1.0
                
                # A Package that complies with the Best Practice for Earth Observation Application Package needs to:
                #
                # * Be a valid CWL document with a single Workflow Class and at least one CommandLineTool Class
                # * Define the command-line and respective arguments and container for each CommandLineTool
                # * Define the Application parameters
                # * Define the Application Design Pattern
                # * Define the requirements for runtime environment
                #
                # The Workflow class steps field orchestrates the execution of the application command line and retrieves all the outputs of the processing steps.
                
                $graph:
                - class: Workflow
                  id: main
                  label: Sounder SIPS L1A PGE 
                  doc: Processes Sounder SIPS L0 products into L1A products
                
                  requirements:
                  - class: ScatterFeatureRequirement
                
                  inputs:
                    input_dir:
                      type: Directory
                      label: L0 Data Directory
                      doc: Directory containing L0 files
                    static_dir:
                      type: Directory
                      label: Static Inputs
                      doc: Directory containing static DEM data
                    start_datetime:
                      type: string
                      label: Data Start Date/Time
                      doc: ISO8601 formated date and time indicating the start of data to be processed from the L0 files
                    end_datetime:
                      type: string  
                      label: Data End Date/Time
                      doc: ISO8601 formated date and time indicating the end of data to be processed from the L0 files
                
                  steps:
                    l1a_process:
                      run: "#l1a_pge"
                      in:
                        input_dir: input_dir
                        static_dir: static_dir
                        start_datetime: start_datetime
                        end_datetime: end_datetime
                      out:
                        - output_dir
                        - stdout_file
                        - stderr_file
                
                  outputs:
                    output_dir:
                      outputSource: l1a_process/output_dir
                      type: Directory
                    stdout_file: 
                      outputSource: l1a_process/stdout_file
                      type: File
                    stderr_file:
                      outputSource: l1a_process/stderr_file
                      type: File
                   
                - class: CommandLineTool
                  id: l1a_pge
                
                  requirements:
                    DockerRequirement:
                      dockerPull: unity-sds/sounder_sips_l1a_pge:r0.1.0
                  
                  arguments: [
                    "$(runtime.outdir)/processed_notebook.ipynb",
                    "-p", "input_path", "$(inputs.input_dir)",
                    "-p", "output_path", "$(runtime.outdir)",
                    "-p", "data_static_path", "$(inputs.static_dir)",
                    "-p", "start_datetime", "$(inputs.start_datetime)",
                    "-p", "end_datetime", "$(inputs.end_datetime)",
                  ]
                  
                  inputs:
                    input_dir:
                      type: Directory
                    static_dir:
                      type: Directory
                    start_datetime:
                      type: string  
                    end_datetime:
                      type: string  
                  
                  outputs:
                    output_dir:
                      type: Directory
                      outputBinding:
                        glob: .
                    stdout_file:
                      type: stdout
                    stderr_file:
                      type: stderr
                  
                  stdout: l1a_pge_stdout.txt
                  stderr: l1a_pge_stderr.txt
                
                $namespaces:
                  s: https://schema.org/
                s:softwareVersion: 1.0.0
                schemas:
                - http://schema.org/version/9.0/schemaorg-current-http.rdf
                
                s:author: 
                  name: James McDuffie
                s:citation:
                s:codeRepository: 
                  url: https://github.jpl.nasa.gov/unity-sds/sips_spss_build
                s:contributor: 
                  - name: Luca Cinquini
                s:dateCreated: 2022-04-14
                s:keywords: l0, l1a, thermal, sips, sounder
                s:license: All Rights Reserved
                s:releaseNotes: Initial release
                s:version: 0.1
            EOT
          + "l1a_package.yml"            = <<-EOT
                input_dir:
                  class: Directory
                  path: /Users/cinquini/data/SOUNDER_SIPS/L1A_INPUT
                static_dir:
                  class: Directory
                  path: /Users/cinquini/data/SOUNDER_SIPS/STATIC_DATA
                start_datetime: "2016-01-14T11:42:00.000Z"
                end_datetime: "2016-01-14T11:54:00:000Z"
            EOT
          + "l1b_package.cwl"            = <<-EOT
                cwlVersion: v1.0
                
                # A Package that complies with the Best Practice for Earth Observation Application Package needs to:
                #
                # * Be a valid CWL document with a single Workflow Class and at least one CommandLineTool Class
                # * Define the command-line and respective arguments and container for each CommandLineTool
                # * Define the Application parameters
                # * Define the Application Design Pattern
                # * Define the requirements for runtime environment
                #
                # The Workflow class steps field orchestrates the execution of the application command line and retrieves all the outputs of the processing steps.
                
                $graph:
                - class: Workflow
                  id: main
                  label: Sounder SIPS L1B PGE 
                  doc: Processes Sounder SIPS L1A products into L1B Products
                
                  requirements:
                  - class: ScatterFeatureRequirement
                
                  inputs:
                    input_dir:
                      type: Directory
                      label: L1A Data Directory
                      doc: Directory containing L1A files
                
                  steps:
                    l1b_process:
                      run: "#l1b_pge"
                      in:
                        input_dir: input_dir
                      out:
                        - output_dir
                        - stdout_file
                        - stderr_file
                
                  outputs:
                    output_dir:
                      outputSource: l1b_process/output_dir
                      type: Directory
                    stdout_file: 
                      outputSource: l1b_process/stdout_file
                      type: File
                    stderr_file:
                      outputSource: l1b_process/stderr_file
                      type: File
                   
                - class: CommandLineTool
                  id: l1b_pge
                
                  requirements:
                    DockerRequirement:
                      # TODO: use public sounder_sips images
                      # dockerPull: unity-sds/sounder_sips_l1b_pge:r0.1.0
                      dockerPull: lucacinquini/sounder_sips_l1b_pge:r0.1.0
                  
                  arguments: [
                    "$(runtime.outdir)/processed_notebook.ipynb",
                    "-p", "input_path", "$(inputs.input_dir)",
                    "-p", "output_path", "$(runtime.outdir)",
                  ]
                  
                  inputs:
                    input_dir:
                      type: Directory
                  
                  outputs:
                    output_dir:
                      type: Directory
                      outputBinding:
                        glob: .
                    stdout_file:
                      type: stdout
                    stderr_file:
                      type: stderr
                  
                  stdout: l1b_pge_stdout.txt
                  stderr: l1b_pge_stderr.txt
                
                $namespaces:
                  s: https://schema.org/
                s:softwareVersion: 1.0.0
                schemas:
                - http://schema.org/version/9.0/schemaorg-current-http.rdf
                
                s:author: 
                  name: James McDuffie
                s:citation:
                s:codeRepository: 
                  url: https://github.jpl.nasa.gov/unity-sds/sips_spss_build
                s:contributor: 
                  - name: Luca Cinquini
                s:dateCreated: 2022-04-14
                s:keywords: l1a, l1b, thermal, sips, sounder
                s:license: All Rights Reserved
                s:releaseNotes: Initial release
                s:version: 0.1
            EOT
          + "l1b_package.yml"            = <<-EOT
                input_dir:
                  class: Directory
                  path: /Users/cinquini/data/SOUNDER_SIPS/L1B_INPUT
            EOT
          + "run_ssips_L1a_pge.cwl"      = <<-EOT
                #!/usr/bin/env cwl-runner
                
                cwlVersion: v1.0
                class: CommandLineTool
                
                requirements:
                  InlineJavascriptRequirement: {}
                  InitialWorkDirRequirement:
                    listing:
                      #- $(inputs.input_dir)
                      #- $(inputs.static_dir)
                      - entryname: my_script.sh
                        entry: |-
                          export input_dir=$3
                          export output_dir=$6
                          export static_dir=$9
                          echo "Input Directory:"
                          ls -l $input_dir
                          echo "Static Directory:"
                          ls -l $static_dir
                          echo "Output Directory:"
                          mkdir -p $output_dir
                          ls -l $output_dir
                
                          papermill /pge/interface/run_l1a_pge.ipynb -p input_path $input_dir -p output_path $output_dir -p data_static_path $static_dir -
                          echo "Output Directory:"
                          ls -lR $output_dir
                          echo "Input Directory:"
                          ls -l $input_dir
                
                hints:
                  DockerRequirement:
                    dockerPull: unity-sds/sounder_sips_l1a_pge:r0.1.0
                  EnvVarRequirement:
                      envDef:
                        SIPS_STATIC_DIR: $(inputs.static_dir.path)
                
                #baseCommand: ["sh", "my_script.sh"]
                #baseCommand: ["papermill", "/pge/interface/run_l1a_pge.ipynb"]
                arguments: [
                  "-p",
                  "input_path",
                  "$(inputs.input_dir)",
                  "-p",
                  "output_path",
                  "$(runtime.outdir)/out",
                  "-p",
                  "data_static_path",
                  "$(inputs.static_dir)",
                  "-"
                ]
                
                
                inputs:
                  input_dir:
                    type: Directory
                  static_dir:
                    type: Directory
                
                outputs:
                  output_dir:
                    type: Directory
                    outputBinding:
                      glob: "out"
                  stdout_file:
                    type: stdout
                  stderr_file:
                    type: stderr
                
                stdout: run_ssips_pge_stdout.txt
                stderr: run_ssips_pge_stderr.txt
            EOT
          + "run_ssips_L1a_pge.yml"      = <<-EOT
                input_dir:
                  class: Directory
                  path: /Users/cinquini/data/SOUNDER_SIPS/L1A_INPUT
                static_dir:
                  class: Directory
                  path: /Users/cinquini/data/SOUNDER_SIPS/STATIC_DATA
            EOT
          + "run_ssips_L1b_pge.cwl"      = <<-EOT
                #!/usr/bin/env cwl-runner
                
                cwlVersion: v1.0
                class: CommandLineTool
                
                requirements:
                  InlineJavascriptRequirement: {}
                  InitialWorkDirRequirement:
                    listing:
                      #- $(inputs.input_dir)
                      #- $(inputs.static_dir)
                      - entryname: my_script.sh
                        entry: |-
                          export input_dir=$3
                          export output_dir=$6
                          export static_dir=$9
                          echo "Input Directory:"
                          ls -l $input_dir
                          echo "Static Directory:"
                          ls -l $static_dir
                          echo "Output Directory:"
                          mkdir -p $output_dir
                          ls -l $output_dir
                
                          papermill /pge/interface/run_l1b_pge.ipynb -p input_path $input_dir -p output_path $output_dir -p data_static_path $static_dir -
                          echo "Output Directory:"
                          ls -lR $output_dir
                          echo "Input Directory:"
                          ls -l $input_dir
                
                hints:
                  DockerRequirement:
                    # dockerPull: unity-sds/sounder_sips_l1b_pge:r0.4.0
                    dockerPull: lucacinquini/sounder_sips_l1b_pge:r0.1.0
                  EnvVarRequirement:
                      envDef:
                        SIPS_STATIC_DIR: $(inputs.static_dir.path)
                
                #baseCommand: ["sh", "my_script.sh"]
                #baseCommand: ["papermill", "/pge/interface/run_l1b_pge.ipynb"]
                arguments: [
                  "$(runtime.outdir)/processed_notebook.ipynb",
                  "-p",
                  "input_path",
                  "$(inputs.input_dir)",
                  "-p",
                  "output_path",
                  "$(runtime.outdir)/out",
                  "-p",
                  "data_static_path",
                  "$(inputs.static_dir)"
                ]
                
                
                inputs:
                  input_dir:
                    type: Directory
                  static_dir:
                    type: Directory
                
                outputs:
                  output_dir:
                    type: Directory
                    outputBinding:
                      glob: "out"
                  stdout_file:
                    type: stdout
                  stderr_file:
                    type: stderr
                
                stdout: run_ssips_l1b_pge_stdout.txt
                stderr: run_ssips_l1b_pge_stderr.txt
            EOT
          + "run_ssips_L1b_pge.yml"      = <<-EOT
                input_dir:
                  class: Directory
                  path: /Users/cinquini/data/SOUNDER_SIPS/L1B_INPUT
                static_dir: 
                  class: Directory
                  path: /Users/cinquini/data/SOUNDER_SIPS/STATIC_DATA
            EOT
          + "run_ssips_pge_job.yml"      = <<-EOT
                source_files:
                - {class: File, path: P1570011AAAAAAAAAAAAAT16014214620701.PDS}
                - {class: File, path: P1570515ATMSSCIENCEAAT16014215930700.PDS}
                input_dir:
                  class: Directory
                  path: /Users/cinquini/tmp/ssips/in/
                static_dir: 
                  class: Directory
                  path: /Users/cinquini/data/SOUNDER_SIPS
            EOT
          + "sounder_sips_pges.md"       = <<-EOT
                # Sounder SIPS PGEs
                
                This page contains the instructions for executing the Sounder SIPS L1a and L1b PGEs as standalone Docker containers.
                The two PGEs can be executed independently - i.e. the L1b PGE can be executed first without prior execution of the L1a PGE.
                Below, `<some directory>` can be any directory, `<aws account number>` is the JPL MIPL AWS account number.
                
                ## Renew the AWS credentials
                ```
                aws-login -pub
                ```
                Credentials will be written for the _saml-pub_ profile.
                
                ## Download the input data
                ```
                cd <some directory>
                mkdir input
                cd input
                # for the L1a PGE:
                aws s3 cp s3://unity-sps/sounder_sips/l1a/in/ . --recursive --profile saml-pub
                # for the L1b PGE:
                aws s3 cp s3://unity-sps/sounder_sips/l1b/in/ . --recursive --profile saml-pub
                export PGE_IN_DIR=`pwd`
                ```
                
                ## Download the static data
                Static data is needed by both the L1a nd L1b PGEs.
                ```
                cd <some directory>
                mkdir static
                cd static
                aws s3 cp s3://unity-ads/sounder_sips/static_files/ . --recursive --profile saml-pub
                export PGE_STATIC_DIR=`pwd`
                ```
                
                ## Set the Docker image and version
                Set the Docker image and version to use, for example:
                ```
                # For L1a:
                export DOCKER_IMAGE=<aws account number>.dkr.ecr.us-west-1.amazonaws.com/unity-sds/sounder_sips_l1a_pge
                # For L1b
                export DOCKER_IMAGE=<aws account number>.dkr.ecr.us-west-1.amazonaws.com/unity-sds/sounder_sips_l1b_pge
                export DOCKER_TAG=r0.1.0
                ```
                
                ## Download the Docker image
                ```
                aws ecr get-login-password --region us-west-1 --profile saml-pub | docker login --username AWS --password-stdin <aws account number>.dkr.ecr.us-west-1.amazonaws.com
                docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
                ```
                
                ## Execute the Docker container containing the PGE
                
                Mounting the local input and output directories to the default locations inside the container where the PGE will look for (i.e., '/pge/in' and '/pge/out'):
                ```
                docker run --rm \
                    -v ${PGE_IN_DIR}:/pge/in \
                    -v ${PGE_OUT_DIR}:/pge/out \
                    -v ${PGE_STATIC_DIR}:/tmp/static \
                    ${DOCKER_IMAGE}:${DOCKER_TAG} \
                    /tmp/processed_notebook.ipynb \
                    -p data_static_path /tmp/static
                ```
                
                Alternatively, mounting the local input and output directories to other locations inside the container and passing them as additional paremeters to the PGE
                (note that the output directory must be writable by the user executing the PGE inside the container):
                
                ```
                docker run --rm \
                    -v ${PGE_IN_DIR}:/pge/inx \
                    -v ${PGE_OUT_DIR}:/tmp/outx \
                    -v ${PGE_STATIC_DIR}:/tmp/staticx \
                    -w /tmp \
                    ${DOCKER_IMAGE}:${DOCKER_TAG} \
                    /tmp/processed_notebook.ipynb \
                    -p input_path /pge/inx -p output_path /tmp/outx -p data_static_path /tmp/staticx
                ```
                
                Finally, also overriding the entrypoint:
                ```
                docker run --rm \
                    -v ${PGE_IN_DIR}:/pge/inx \
                    -v ${PGE_OUT_DIR}:/tmp/out \
                    -v ${PGE_STATIC_DIR}:/tmp/static \
                    -w /tmp \
                    --entrypoint papermill \
                    ${DOCKER_IMAGE}:$DOCKER_TAG \
                    /pge/interface/run_l1b_pge.ipynb /tmp/processed_notebook.ipynb \
                    -p input_path /pge/inx -p output_path /tmp/out -p data_static_path /tmp/static
                ```
                The execution of the L1a Docker container will last approximately two hours and write output in the $PGE_OUT_DIR directory.
                The execution of the L1b Docker container will last only a few minutes and again write output in the $PGE_OUT_DIR directory.
            EOT
          + "ssips_L1a_L1b_workflow.cwl" = <<-EOT
                #!/usr/bin/env cwl-runner
                
                cwlVersion: v1.0
                class: Workflow
                label: Workflow that executes the combined Sounder SIPS L1a +L1b end-to-end processing
                doc: Requires valid AWS credentials as input arguments
                
                $namespaces:
                  cwltool: http://commonwl.org/cwltool#
                
                hints:
                  "cwltool:Secrets":
                    secrets:
                      - workflow_aws_access_key_id
                      - workflow_aws_secret_access_key
                      - workflow_aws_session_token
                
                requirements:
                  SubworkflowFeatureRequirement: {}
                  ScatterFeatureRequirement: {}
                
                inputs:
                  l1a_workflow_source_s3_folder: string
                  l1a_workflow_source_s3_filename: string
                  l1a_workflow_product_id: string
                  l1a_workflow_min_sleep: int
                  l1a_workflow_max_sleep: int
                  l1a_workflow_target_s3_folder: string
                  l1b_workflow_target_s3_folder: string
                  workflow_aws_access_key_id: string
                  workflow_aws_secret_access_key: string
                  workflow_aws_session_token: string
                outputs: 
                  l1a_workflow_target_s3_folders: 
                    type: string[]
                    outputSource: ssips_L1a_workflow/workflow_target_s3_folders
                  l1a_workflow_target_s3_subdirs:
                    type: string[]
                    outputSource: ssips_L1a_workflow/workflow_target_s3_subdirs
                  l1b_workflow_target_s3_folders:
                    type: string[]
                    outputSource: [ssips_L1b_workflow/workflow_target_s3_folder]
                  l1b_workflow_target_s3_subdirs:
                    type: string[]
                    outputSource: [ssips_L1b_workflow/workflow_target_s3_subdir]
                
                steps:
                  ssips_L1a_workflow:
                    run: ssips_L1a_workflow.cwl
                    in:
                      workflow_source_s3_folder: l1a_workflow_source_s3_folder
                      workflow_source_s3_filename: l1a_workflow_source_s3_filename
                      workflow_product_id: l1a_workflow_product_id
                      workflow_min_sleep: l1a_workflow_min_sleep
                      workflow_max_sleep: l1a_workflow_max_sleep
                      workflow_target_s3_folder: l1a_workflow_target_s3_folder
                      workflow_aws_access_key_id: workflow_aws_access_key_id
                      workflow_aws_secret_access_key: workflow_aws_secret_access_key
                      workflow_aws_session_token: workflow_aws_session_token
                    out:
                      - workflow_target_s3_folders
                      - workflow_target_s3_subdirs
                  ssips_L1b_workflow:
                    run: ssips_L1b_workflow.cwl
                    scatter: workflow_source_s3_subdir
                    in:
                      workflow_source_s3_folder: l1a_workflow_target_s3_folder
                      workflow_source_s3_subdir: ssips_L1a_workflow/workflow_target_s3_subdirs
                      workflow_target_s3_folder: l1b_workflow_target_s3_folder
                      workflow_aws_access_key_id: workflow_aws_access_key_id
                      workflow_aws_secret_access_key: workflow_aws_secret_access_key
                      workflow_aws_session_token: workflow_aws_session_token
                    out:
                      - workflow_target_s3_folder
                      - workflow_target_s3_subdir
                   
                
            EOT
          + "ssips_L1a_L1b_workflow.yml" = <<-EOT
                l1a_workflow_source_s3_folder: s3://sds-test-bucket/L1a-input/dumby-product-20210622191038567000
                l1a_workflow_source_s3_filename: LC80101172015002LGN00_BQA.TIF
                l1a_workflow_product_id: dumby-product-20210622191038567000
                l1a_workflow_min_sleep: 1
                l1a_workflow_max_sleep: 5
                l1a_workflow_target_s3_folder: s3://sds-test-bucket/L1a-output
                l1b_workflow_target_s3_folder: s3://sds-test-bucket/L1b-output
                workflow_aws_access_key_id: ...........
                workflow_aws_secret_access_key: ..............
                workflow_aws_session_token: ............
            EOT
          + "ssips_L1a_workflow.cwl"     = <<-EOT
                #!/usr/bin/env cwl-runner
                
                cwlVersion: v1.0
                class: Workflow
                label: Workflow that executes the Sounder SIPS end-to-end L1a processing
                doc: Requires valid AWS credentials as input arguments
                
                $namespaces:
                  cwltool: http://commonwl.org/cwltool#
                
                hints:
                  "cwltool:Secrets":
                    secrets:
                      - aws_region
                      - aws_access_key_id
                      - aws_secret_access_key
                      - aws_session_token
                
                requirements:
                  SubworkflowFeatureRequirement: {}
                  ScatterFeatureRequirement: {}
                  InlineJavascriptRequirement: {}
                  StepInputExpressionRequirement: {}
                
                inputs:
                  source_s3_folder: string
                  source_s3_subdir: string
                  static_dir: Directory
                  target_s3_folder: string
                  start_datetime: string
                  end_datetime: string
                  aws_region: string
                  aws_access_key_id: string
                  aws_secret_access_key: string
                  aws_session_token: string
                
                outputs:
                  stdout_stage-in:
                    type: File
                    outputSource: l1a-stage-in/stdout_file
                  stderr_stage-in:
                    type: File
                    outputSource: l1a-stage-in/stderr_file
                  stdout_run-pge:
                    type: File
                    outputSource: l1a-run-pge/stdout_file
                  stderr_run-pge:
                    type: File
                    outputSource: l1a-run-pge/stderr_file
                  stdout_stage-out:
                    type: File
                    outputSource: l1a-stage-out/stdout_file
                  stderr_stage-out:
                    type: File
                    outputSource: l1a-stage-out/stderr_file
                  output_target_s3_folder:
                    type: string
                    outputSource: l1a-stage-out/target_s3_folder
                  output_target_s3_subdir:
                    type: string
                    outputSource: l1a-stage-out/target_s3_subdir
                
                steps:
                  l1a-stage-in:
                    run: utils/download_dir_from_s3.cwl
                    in:
                      source_s3_folder: source_s3_folder
                      source_s3_subdir: source_s3_subdir
                      aws_region: aws_region
                      aws_access_key_id: aws_access_key_id
                      aws_secret_access_key: aws_secret_access_key
                      aws_session_token: aws_session_token
                    out:
                    - target_local_subdir
                    - stdout_file
                    - stderr_file
                
                  l1a-run-pge:
                    # run: run_ssips_L1a_pge.cwl
                    run: l1a_package.cwl
                    in:
                      input_dir: l1a-stage-in/target_local_subdir
                      static_dir: static_dir
                      start_datetime: start_datetime
                      end_datetime: end_datetime
                    out:
                    - output_dir
                    - stdout_file
                    - stderr_file
                
                  l1a-stage-out:
                    run: utils/upload_dir_to_s3.cwl
                    in:
                      source_local_subdir: l1a-run-pge/output_dir
                      target_s3_folder: target_s3_folder
                      aws_region: aws_region
                      aws_access_key_id: aws_access_key_id
                      aws_secret_access_key: aws_secret_access_key
                      aws_session_token: aws_session_token
                    out:
                    - target_s3_folder
                    - target_s3_subdir
                    - stdout_file
                    - stderr_file
            EOT
          + "ssips_L1a_workflow.yml"     = <<-EOT
                source_s3_folder: s3://unity-sps/sounder_sips/l1a
                source_s3_subdir: in
                static_dir:
                  class: Directory
                  path: /Users/cinquini/data/SOUNDER_SIPS/STATIC_DATA
                target_s3_folder: s3://unity-sps/sounder_sips/l1a/out
                start_datetime: "2016-01-14T11:42:00.000Z"
                end_datetime: "2016-01-14T11:54:00:000Z"
                aws_region: us-west-1
                aws_access_key_id: .........
                aws_secret_access_key: .............
                aws_session_token: ...................
            EOT
          + "ssips_L1a_workflow_job.yml" = <<-EOT
                workflow_source_s3_folder: s3://sds-test-bucket/L1a-input/dumby-product-20210622191038567000
                workflow_source_s3_filename: LC80101172015002LGN00_BQA.TIF
                workflow_product_id: dumby-product-20210622191038567000
                workflow_min_sleep: 1
                workflow_max_sleep: 5
                workflow_target_s3_folder: s3://sds-test-bucket/L1a-output
                workflow_aws_access_key_id: .........
                workflow_aws_secret_access_key: ...............
                workflow_aws_session_token: ................
            EOT
          + "ssips_L1b_workflow.cwl"     = <<-EOT
                #!/usr/bin/env cwl-runner
                
                cwlVersion: v1.0
                class: Workflow
                label: Workflow that executes the Sounder SIPS end-to-end L1b processing
                doc: Requires valid AWS credentials as input arguments
                
                $namespaces:
                  cwltool: http://commonwl.org/cwltool#
                
                hints:
                  "cwltool:Secrets":
                    secrets:
                      - aws_region
                      - aws_access_key_id
                      - aws_secret_access_key
                      - aws_session_token
                
                requirements:
                  SubworkflowFeatureRequirement: {}
                  ScatterFeatureRequirement: {}
                  InlineJavascriptRequirement: {}
                  StepInputExpressionRequirement: {}
                
                inputs:
                  source_s3_folder: string
                  source_s3_subdir: string
                  static_dir: Directory
                  target_s3_folder: string
                  aws_region: string
                  aws_access_key_id: string
                  aws_secret_access_key: string
                  aws_session_token: string
                
                outputs:
                  stdout_l1b-stage-in:
                    type: File
                    outputSource: l1b-stage-in/stdout_file
                  stderr_l1b-stage-in:
                    type: File
                    outputSource: l1b-stage-in/stderr_file
                  stdout_l1b-run-pge:
                    type: File
                    outputSource: l1b-run-pge/stdout_file
                  stderr_l1b-run-pge:
                    type: File
                    outputSource: l1b-run-pge/stderr_file
                  stdout_stage-out:
                    type: File
                    outputSource: l1b-stage-out/stdout_file
                  stderr_stage-out:
                    type: File
                    outputSource: l1b-stage-out/stderr_file
                  output_target_s3_folder:
                    type: string
                    outputSource: l1b-stage-out/target_s3_folder
                  output_target_s3_subdir:
                    type: string
                    outputSource: l1b-stage-out/target_s3_subdir
                
                steps:
                  l1b-stage-in:
                    run: utils/download_dir_from_s3.cwl
                    in:
                      source_s3_folder: source_s3_folder
                      source_s3_subdir: source_s3_subdir
                      aws_region: aws_region
                      aws_access_key_id: aws_access_key_id
                      aws_secret_access_key: aws_secret_access_key
                      aws_session_token: aws_session_token
                    out:
                    - target_local_subdir
                    - stdout_file
                    - stderr_file
                
                  l1b-run-pge:
                    # run: run_ssips_L1b_pge.cwl
                    run: l1b_package.cwl
                    in:
                      input_dir: l1b-stage-in/target_local_subdir
                      static_dir: static_dir
                    out:
                    - output_dir
                    - stdout_file
                    - stderr_file
                
                  l1b-stage-out:
                    run: utils/upload_dir_to_s3.cwl
                    in:
                      source_local_subdir: l1b-run-pge/output_dir
                      target_s3_folder: target_s3_folder
                      aws_region: aws_region
                      aws_access_key_id: aws_access_key_id
                      aws_secret_access_key: aws_secret_access_key
                      aws_session_token: aws_session_token
                    out:
                    - target_s3_folder
                    - target_s3_subdir
                    - stdout_file
                    - stderr_file
                
            EOT
          + "ssips_L1b_workflow.yml"     = <<-EOT
                source_s3_folder: s3://unity-sps/sounder_sips/l1b
                source_s3_subdir: in
                static_dir:
                  class: Directory
                  path: /static-data
                target_s3_folder: s3://unity-sps/sounder_sips/l1b/out
                aws_region: us-west-1
                aws_access_key_id: ASIA434CXH3EUBE3WBEJ
                aws_secret_access_key: nn1Waw5r7vV8y4P778HRRZHsCYrPeE6oCVosI9Yl
                aws_session_token: FwoGZXIvYXdzENP//////////wEaDHQyrNvcmyRMbgex6iLdAf04ymKlcUTNXUJUTVgWWAXngLISkVgvWai3HhBNlFkbYomjRGtqlpo2WzuBrKwYDRWby0Cl8RB2ebPJjS09tvrf4iO0AF7gl5A/hoxZIPaDRGn/XVQUzVb4Pv+qCU1ir20F7InCadk7f/qo5cNI6axu0mXIKX7EDl8NVmEPp5zcERaKG3elf76xpknfX1VcHOQAyUWI6QxnQsUyZv/8A/Dy+LOcGK10KdwoJClJdMgMRHd8xT8ep/jCUKHKmraoTzwLJ9RnFLWimVxmF7cCgBZhwkpzrqRnHIZTi4pHKMPh55UGMjI6Z9ZzCoT50SEmrXkAWy69bfPy5WJB/fVloTMvvHtUT7b3jhzuUOEwvzaeh3d+cXTnww==
            EOT
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "cwl-workflows"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.datasets will be created
  + resource "kubernetes_config_map" "datasets" {
      + data = {
          + "datasets.json" = jsonencode(
                {
                  + datasets = [
                      + {
                          + alt_match_pattern = null
                          + browse            = {
                              + location        = "s3://13.52.177.59:30007/datasets/browse/{id}"
                              + s3-profile-name = "default"
                              + urls            = [
                                  + "http://13.52.177.59:30008/buckets/datasets/browse/products/{id}",
                                  + "s3://13.52.177.59:30007/datasets/browse/{id}",
                                ]
                            }
                          + extractor         = null
                          + ipath             = "ariamh::data/area_of_interest"
                          + level             = "L0"
                          + match_pattern     = "/(?P<id>AOI_.+)$"
                          + publish           = {
                              + location        = "s3://13.52.177.59:30007/datasets/products/{id}"
                              + s3-profile-name = "default"
                              + urls            = [
                                  + "http://13.52.177.59:30008/buckets/datasets/browse/products/{id}",
                                  + "s3://13.52.177.59:30007/datasets/products/{id}",
                                ]
                            }
                          + type              = "area_of_interest"
                        },
                      + {
                          + alt_match_pattern = null
                          + browse            = {
                              + location        = "s3://13.52.177.59:30007/datasets/browse/hello_world/{version}/{year}/{month}/{day}/{id}"
                              + s3-profile-name = "default"
                              + urls            = [
                                  + "http://13.52.177.59:30008/buckets/datasets/browse/products/hello_world/{version}/{year}/{month}/{day}/{id}",
                                  + "s3://13.52.177.59:30007/datasets/browse/hello_world/{version}/{year}/{month}/{day}/{id}",
                                ]
                            }
                          + extractor         = null
                          + ipath             = "hysds::data/hello_world"
                          + level             = "NA"
                          + match_pattern     = "/(?P<id>hello_world-product-(?P<year>\\d{4})(?P<month>\\d{2})(?P<day>\\d{2})T.*)$"
                          + publish           = {
                              + location        = "s3://13.52.177.59:30007/datasets/products/hello_world/{version}/{year}/{month}/{day}/{id}"
                              + s3-profile-name = "default"
                              + urls            = [
                                  + "http://13.52.177.59:30008/buckets/datasets/browse/products/hello_world/{version}/{year}/{month}/{day}/{id}",
                                  + "s3://13.52.177.59:30007/datasets/products/hello_world/{version}/{year}/{month}/{day}/{id}",
                                ]
                            }
                          + type              = "hello_world"
                        },
                    ]
                }
            )
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "datasets"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.grq2-settings will be created
  + resource "kubernetes_config_map" "grq2-settings" {
      + data = {
          + "settings.cfg" = <<-EOT
                # ElasticSearch URL
                AWS_ES = False
                ES_PROTOCOL = "http"
                ES_HOST = "grq-es"
                ES_PORT = 9201
                # ES_URL = "{{ GRQ_ES_PROTOCOL or 'http' }}://{{ GRQ_ES_PVT_IP }}:{{ GRQ_ES_PORT or 9200}}"
                ES_URL = "http://grq-es:9201"
                
                # Mozart Elasticsearch URL
                MOZART_ES_URL = "http://mozart-es:9200"
                
                # alias to ElasticSearch GRQ index
                GRQ_INDEX = "grq"
                
                # ElasticSearch geonames index
                GEONAMES_INDEX = "geonames"
                
                # Redis URL
                REDIS_URL = "redis://redis:6379/0"
                
                # ES index for user rules (located in mozart's ES)
                USER_RULES_INDEX = "user_rules-grq"
                
                # ES index for hysds_ios and job_specs (located in mozart's ES)
                HYSDS_IOS_INDEX = "hysds_ios-grq"
                JOB_SPECS_INDEX = "job_specs"
                
                AWS_REGION = "{{ AWS_REGION }}"
            EOT
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "grq2-settings"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.logstash-configs will be created
  + resource "kubernetes_config_map" "logstash-configs" {
      + data = {
          + "event-status"  = jsonencode(
                {
                  + aliases        = {
                      + job_status = {}
                    }
                  + index_patterns = [
                      + "event_status*",
                    ]
                  + mappings       = {
                      + properties = {
                          + event       = {
                              + enabled = false
                              + type    = "object"
                            }
                          + hostname    = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + resource    = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + status      = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + tags        = {
                              + copy_to = [
                                  + "text_fields",
                                ]
                              + fields  = {
                                  + keyword = {
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                }
                              + type    = "text"
                            }
                          + text_fields = {
                              + type = "text"
                            }
                          + timestamp   = {
                              + type = "date"
                            }
                          + type        = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + uuid        = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                        }
                    }
                  + settings       = {
                      + analysis                 = {
                          + analyzer = {
                              + default = {
                                  + filter    = [
                                      + "lowercase",
                                      + "word_delimiter",
                                    ]
                                  + tokenizer = "keyword"
                                }
                            }
                        }
                      + "index.refresh_interval" = "5s"
                    }
                }
            )
          + "job-status"    = jsonencode(
                {
                  + aliases        = {
                      + job_status = {}
                    }
                  + index_patterns = [
                      + "job_status*",
                    ]
                  + mappings       = {
                      + properties = {
                          + celery_hostname  = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + celery_pid       = {
                              + type = "integer"
                            }
                          + celery_runtime   = {
                              + type = "double"
                            }
                          + celery_timestamp = {
                              + type = "date"
                            }
                          + context          = {
                              + enabled = false
                              + type    = "object"
                            }
                          + dedup            = {
                              + type = "boolean"
                            }
                          + dedup_job        = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + dedup_msg        = {
                              + copy_to = [
                                  + "text_fields",
                                ]
                              + type    = "text"
                            }
                          + error            = {
                              + copy_to = [
                                  + "text_fields",
                                ]
                              + fields  = {
                                  + keyword = {
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                }
                              + type    = "text"
                            }
                          + job              = {
                              + properties = {
                                  + command              = {
                                      + enabled = false
                                      + type    = "object"
                                    }
                                  + container_image_name = {
                                      + copy_to      = [
                                          + "text_fields",
                                        ]
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                  + container_image_url  = {
                                      + copy_to      = [
                                          + "text_fields",
                                        ]
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                  + context              = {
                                      + enabled = false
                                      + type    = "object"
                                    }
                                  + delivery_info        = {
                                      + properties = {
                                          + exchange    = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + priority    = {
                                              + type = "integer"
                                            }
                                          + redelivered = {
                                              + type = "boolean"
                                            }
                                          + routing_key = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                        }
                                    }
                                  + job_hash             = {
                                      + copy_to      = [
                                          + "text_fields",
                                        ]
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                  + job_id               = {
                                      + copy_to      = [
                                          + "text_fields",
                                        ]
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                  + job_info             = {
                                      + properties = {
                                          + cmd_duration        = {
                                              + type = "double"
                                            }
                                          + cmd_end             = {
                                              + type = "date"
                                            }
                                          + cmd_start           = {
                                              + type = "date"
                                            }
                                          + completed_queue     = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + context             = {
                                              + enabled = false
                                              + type    = "object"
                                            }
                                          + dedup               = {
                                              + type = "boolean"
                                            }
                                          + dedup_job           = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + duration            = {
                                              + type = "double"
                                            }
                                          + error_queue         = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + execute_node        = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + facts               = {
                                              + properties = {
                                                  + architecture                    = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                  + ec2_ami_id                      = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                  + ec2_instance_type               = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                  + ec2_placement_availability_zone = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                  + is_virtual                      = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                  + memorytotal                     = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                  + physicalprocessorcount          = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                  + processorcount                  = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                  + swapsize                        = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                  + virtual                         = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                }
                                            }
                                          + host                = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + id                  = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + job_dir             = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + job_payload         = {
                                              + properties = {
                                                  + job_type        = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                  + payload_task_id = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                }
                                            }
                                          + job_queue           = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + job_status_exchange = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + job_url             = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + metrics             = {
                                              + properties = {
                                                  + inputs_localized   = {
                                                      + properties = {
                                                          + disk_usage    = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                          + duration      = {
                                                              + type = "double"
                                                            }
                                                          + path          = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                          + time_end      = {
                                                              + type = "date"
                                                            }
                                                          + time_start    = {
                                                              + type = "date"
                                                            }
                                                          + transfer_rate = {
                                                              + type = "double"
                                                            }
                                                          + url           = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                        }
                                                    }
                                                  + job_dir_size       = {
                                                      + copy_to      = [
                                                          + "text_fields",
                                                        ]
                                                      + ignore_above = 256
                                                      + type         = "keyword"
                                                    }
                                                  + product_provenance = {
                                                      + properties = {
                                                          + access_latency         = {
                                                              + type = "double"
                                                            }
                                                          + acquisition_start_time = {
                                                              + type = "date"
                                                            }
                                                          + availability_time      = {
                                                              + type = "date"
                                                            }
                                                          + ground_system_latency  = {
                                                              + type = "double"
                                                            }
                                                          + location               = {
                                                              + strategy = "recursive"
                                                              + type     = "geo_shape"
                                                            }
                                                          + processing_latency     = {
                                                              + type = "double"
                                                            }
                                                          + processing_start_time  = {
                                                              + type = "date"
                                                            }
                                                          + product_type           = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                          + source_production_time = {
                                                              + type = "date"
                                                            }
                                                          + total_latency          = {
                                                              + type = "double"
                                                            }
                                                        }
                                                    }
                                                  + products_staged    = {
                                                      + properties = {
                                                          + browse_urls    = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                          + dataset        = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                          + dataset_level  = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                          + dataset_type   = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                          + disk_usage     = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                          + duration       = {
                                                              + type = "double"
                                                            }
                                                          + id             = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                          + ipath          = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                          + path           = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                          + system_version = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                          + time_end       = {
                                                              + type = "date"
                                                            }
                                                          + time_start     = {
                                                              + type = "date"
                                                            }
                                                          + transfer_rate  = {
                                                              + type = "double"
                                                            }
                                                          + urls           = {
                                                              + copy_to      = [
                                                                  + "text_fields",
                                                                ]
                                                              + ignore_above = 256
                                                              + type         = "keyword"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                          + payload             = {
                                              + enabled = false
                                              + type    = "object"
                                            }
                                          + payload_hash        = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + public_ip           = {
                                              + copy_to      = [
                                                  + "text_fields",
                                                ]
                                              + ignore_above = 256
                                              + type         = "keyword"
                                            }
                                          + status              = {
                                              + type = "integer"
                                            }
                                          + time_end            = {
                                              + type = "date"
                                            }
                                          + time_queued         = {
                                              + type = "date"
                                            }
                                          + time_start          = {
                                              + type = "date"
                                            }
                                        }
                                    }
                                  + localize_urls        = {
                                      + enabled = false
                                      + type    = "object"
                                    }
                                  + name                 = {
                                      + copy_to      = [
                                          + "text_fields",
                                        ]
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                  + params               = {
                                      + enabled = false
                                      + type    = "object"
                                    }
                                  + priority             = {
                                      + type = "integer"
                                    }
                                  + tag                  = {
                                      + copy_to      = [
                                          + "text_fields",
                                        ]
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                  + task_id              = {
                                      + copy_to      = [
                                          + "text_fields",
                                        ]
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                  + type                 = {
                                      + copy_to      = [
                                          + "text_fields",
                                        ]
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                  + username             = {
                                      + copy_to      = [
                                          + "text_fields",
                                        ]
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                }
                            }
                          + job_id           = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + msg              = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + msg_details      = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + payload_hash     = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + payload_id       = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + resource         = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + short_error      = {
                              + copy_to = [
                                  + "text_fields",
                                ]
                              + fields  = {
                                  + keyword = {
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                }
                              + type    = "text"
                            }
                          + signum           = {
                              + type = "integer"
                            }
                          + status           = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + tags             = {
                              + copy_to = [
                                  + "text_fields",
                                ]
                              + fields  = {
                                  + keyword = {
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                }
                              + type    = "text"
                            }
                          + text_fields      = {
                              + type = "text"
                            }
                          + timestamp        = {
                              + type = "date"
                            }
                          + traceback        = {
                              + copy_to = [
                                  + "text_fields",
                                ]
                              + type    = "text"
                            }
                          + type             = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + user_tags        = {
                              + copy_to = [
                                  + "text_fields",
                                ]
                              + fields  = {
                                  + keyword = {
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                }
                              + type    = "text"
                            }
                          + uuid             = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                        }
                    }
                  + settings       = {
                      + analysis                 = {
                          + analyzer = {
                              + default = {
                                  + filter    = [
                                      + "lowercase",
                                      + "word_delimiter",
                                    ]
                                  + tokenizer = "keyword"
                                }
                            }
                        }
                      + "index.refresh_interval" = "5s"
                    }
                }
            )
          + "logstash-conf" = <<-EOT
                input {
                  redis {
                    host => "redis"
                    # {% if MOZART_REDIS_PASSWORD != "" %}password => "{{ MOZART_REDIS_PASSWORD }}"{% endif %}
                    # these settings should match the output of the agent
                    data_type => "list"
                    key => "logstash"
                
                    # We use the 'msgpack' codec here because we expect to read
                    # msgpack events from redis.
                    codec => msgpack
                  }
                }
                
                filter {
                  if [resource] in ["worker", "task"] {
                    mutate {
                      convert => {
                        "[event][timestamp]" => "string"
                        "[event][local_received]" => "string"
                      }
                
                      split => ["[event][timestamp]", "."]
                      split => ["[event][local_received]", "."]
                
                      add_field => [ "[event][timestamp_new]" , "%{[event][timestamp][0]}" ]
                      add_field => [ "[event][local_received_new]" , "%{[event][local_received][0]}" ]
                
                      remove_field => ["[event][timestamp]", "[event][local_received]"]
                    }
                
                    mutate {
                      rename => { "[event][timestamp_new]" => "timestamp" }
                      rename => { "[event][local_received_new]" => "local_received" }
                    }
                  }
                }
                
                output {
                  #stdout { codec => rubydebug }
                
                  if [resource] == "job" {
                    elasticsearch {
                      hosts => ["mozart-es:9200"]
                      index => "job_status-current"
                      document_id => "%{payload_id}"
                      template => "/usr/share/logstash/job_status.template.json"
                      template_name => "job_status"
                    }
                  } else if [resource] == "worker" {
                    elasticsearch {
                      hosts => ["mozart-es:9200"]
                      index => "worker_status-current"
                      document_id => "%{celery_hostname}"
                      template => "/usr/share/logstash/worker_status.template.json"
                      template_name => "worker_status"
                    }
                  } else if [resource] == "task" {
                    elasticsearch {
                      hosts => ["mozart-es:9200"]
                      index => "task_status-current"
                      document_id => "%{uuid}"
                      template => "/usr/share/logstash/task_status.template.json"
                      template_name => "task_status"
                    }
                  } else if [resource] == "event" {
                    elasticsearch {
                      hosts => ["mozart-es:9200"]
                      index => "event_status-current"
                      document_id => "%{uuid}"
                      template => "/usr/share/logstash/event_status.template.json"
                      template_name => "event_status"
                    }
                  } else {}
                }
            EOT
          + "logstash-yml"  = <<-EOT
                http.host: "0.0.0.0"
                xpack.monitoring.elasticsearch.hosts: ["http://mozart-es:9200"]
            EOT
          + "task-status"   = jsonencode(
                {
                  + aliases        = {
                      + job_status  = {}
                      + task_status = {}
                    }
                  + index_patterns = [
                      + "task_status*",
                    ]
                  + mappings       = {
                      + properties = {
                          + celery_hostname = {
                              + copy_to = [
                                  + "text_fields",
                                ]
                              + type    = "text"
                            }
                          + event           = {
                              + properties = {
                                  + active         = {
                                      + type = "integer"
                                    }
                                  + clock          = {
                                      + type = "integer"
                                    }
                                  + freq           = {
                                      + type = "double"
                                    }
                                  + hostname       = {
                                      + copy_to = [
                                          + "text_fields",
                                        ]
                                      + type    = "text"
                                    }
                                  + loadavg        = {
                                      + type = "double"
                                    }
                                  + local_received = {
                                      + type = "date"
                                    }
                                  + pid            = {
                                      + type = "integer"
                                    }
                                  + processed      = {
                                      + type = "integer"
                                    }
                                  + sw_ident       = {
                                      + copy_to = [
                                          + "text_fields",
                                        ]
                                      + type    = "text"
                                    }
                                  + sw_sys         = {
                                      + copy_to = [
                                          + "text_fields",
                                        ]
                                      + type    = "text"
                                    }
                                  + sw_ver         = {
                                      + copy_to = [
                                          + "text_fields",
                                        ]
                                      + type    = "text"
                                    }
                                  + timestamp      = {
                                      + type = "date"
                                    }
                                  + type           = {
                                      + copy_to = [
                                          + "text_fields",
                                        ]
                                      + type    = "text"
                                    }
                                  + utcoffset      = {
                                      + type = "integer"
                                    }
                                }
                            }
                          + resource        = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + status          = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + tags            = {
                              + fields = {
                                  + keyword = {
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                }
                              + type   = "text"
                            }
                          + text_fields     = {
                              + type = "text"
                            }
                          + type            = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + uuid            = {
                              + copy_to = [
                                  + "text_fields",
                                ]
                              + type    = "text"
                            }
                        }
                    }
                  + settings       = {
                      + analysis = {
                          + analyzer = {
                              + default = {
                                  + filter    = [
                                      + "lowercase",
                                      + "word_delimiter",
                                    ]
                                  + tokenizer = "keyword"
                                }
                            }
                        }
                    }
                }
            )
          + "worker-status" = jsonencode(
                {
                  + aliases        = {
                      + job_status    = {}
                      + worker_status = {}
                    }
                  + index_patterns = [
                      + "worker_status*",
                    ]
                  + mappings       = {
                      + properties = {
                          + celery_hostname = {
                              + copy_to = [
                                  + "text_fields",
                                ]
                              + type    = "text"
                            }
                          + event           = {
                              + properties = {
                                  + active         = {
                                      + type = "integer"
                                    }
                                  + clock          = {
                                      + type = "integer"
                                    }
                                  + freq           = {
                                      + type = "double"
                                    }
                                  + hostname       = {
                                      + copy_to = [
                                          + "text_fields",
                                        ]
                                      + type    = "text"
                                    }
                                  + loadavg        = {
                                      + type = "double"
                                    }
                                  + local_received = {
                                      + type = "date"
                                    }
                                  + pid            = {
                                      + type = "integer"
                                    }
                                  + processed      = {
                                      + type = "integer"
                                    }
                                  + sw_ident       = {
                                      + copy_to = [
                                          + "text_fields",
                                        ]
                                      + type    = "text"
                                    }
                                  + sw_sys         = {
                                      + copy_to = [
                                          + "text_fields",
                                        ]
                                      + type    = "text"
                                    }
                                  + sw_ver         = {
                                      + copy_to = [
                                          + "text_fields",
                                        ]
                                      + type    = "text"
                                    }
                                  + timestamp      = {
                                      + type = "date"
                                    }
                                  + type           = {
                                      + copy_to = [
                                          + "text_fields",
                                        ]
                                      + type    = "text"
                                    }
                                  + utcoffset      = {
                                      + type = "integer"
                                    }
                                }
                            }
                          + resource        = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + status          = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + tags            = {
                              + fields = {
                                  + keyword = {
                                      + ignore_above = 256
                                      + type         = "keyword"
                                    }
                                }
                              + type   = "text"
                            }
                          + text_fields     = {
                              + type = "text"
                            }
                          + type            = {
                              + copy_to      = [
                                  + "text_fields",
                                ]
                              + ignore_above = 256
                              + type         = "keyword"
                            }
                          + uuid            = {
                              + copy_to = [
                                  + "text_fields",
                                ]
                              + type    = "text"
                            }
                        }
                    }
                  + settings       = {
                      + analysis = {
                          + analyzer = {
                              + default = {
                                  + filter    = [
                                      + "lowercase",
                                      + "word_delimiter",
                                    ]
                                  + tokenizer = "keyword"
                                }
                            }
                        }
                    }
                }
            )
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "logstash-configs"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.mozart-settings will be created
  + resource "kubernetes_config_map" "mozart-settings" {
      + data = {
          + "settings.cfg" = <<-EOT
                # secret key
                SECRET_KEY = "This is a test secret key"
                
                # ops account
                OPS_USER = "{{ OPS_USER }}"
                OPS_PASSWORD_HASH = "{{ OPS_PASSWORD_HASH }}"
                
                #LDAP
                LDAP_HOST = "ldap.test.com"
                LDAP_BASEDN = "ou=personnel,dc=dir,dc=test,dc=com"
                LDAP_GROUPS = "{{ LDAP_GROUPS }}"
                
                # PORT
                PORT = 8888
                
                # GRQ SERVER
                GRQ_HOST = "{{ GRQ_FQDN }}"
                GRQ_PORT = 80
                TOSCA_URL = "https://{{ GRQ_FQDN }}/search/"
                
                # Mozart URL
                MOZART_URL = "https://{{ MOZART_FQDN }}/mozart/"
                
                # Mozart REST API
                MOZART_REST_API = "https://{{ MOZART_PVT_IP }}/mozart/"
                
                # ElasticSearch host and indices
                ES_URL = "http://mozart-es:9200"
                USER_RULES_INDEX = "user_rules-mozart"
                HYSDS_IOS_INDEX = "hysds_ios-mozart"
                JOB_SPECS_INDEX = "job_specs"
                JOB_STATUS_INDEX = "job_status-current"
                CONTAINERS_INDEX = "containers"
                
                # key file for fabric
                KEY_FILENAME = "{{ KEY_FILENAME }}"
                
                # execute node user
                EXECUTE_NODE_USER = "{{ OPS_USER }}"
                
                # puccini host
                PUCCINI_HOST = "{{ PUCCINI_FQDN }}"
                PUCCINI_USER = "{{ OPS_USER }}"
                
                # Kibana URL
                KIBANA_JOB_METRICS_URL = "https://{{ METRICS_FQDN }}/metrics/#/dashboard/elasticsearch/Job%20Metrics"
                KIBANA_PROV_METRICS_URL = "https://{{ METRICS_FQDN }}/metrics/#/dashboard/elasticsearch/Provenance%20Metrics"
                KIBANA_INSTANCE_STATS_URL = "https://{{ METRICS_FQDN }}/metrics/#/dashboard/elasticsearch/Worker%20Metrics"
                
                # Flower URL
                FLOWER_URL = "http://{{ MOZART_FQDN }}:5555"
                
                # RabbitMQ Admin URL
                RABBITMQ_ADMIN_URL = "http://rabbitmq:15672"
                RABBITMQ_ADMIN_API = "http://rabbitmq:15672"
                
                # System protected queue
                PROTECTED_QUEUES = ["{{ SYSTEM_JOBS_QUEUE }}"]
                
                JOB_SUBMISSION_JOB_SPEC = "{{ LIGHTWEIGHT_JOBS_SPEC }}"
                JOB_SUBMISSION_QUEUE = "{{ SYSTEM_JOBS_QUEUE }}"
                
                # ES plugins
                # ES_HEAD_URL = "http://{{ MOZART_ES_FQDN }}:9200/_plugin/head"
                # ES_KOPF_URL = "http://{{ MOZART_ES_FQDN }}:9200/_plugin/kopf"
                
                # value needed to generate Jenkins job name
                # VENUE = "{{ VENUE }}"
                VENUE = "unity-demo"
                
                # jenkins
                # JENKINS_ENABLED = {{ JENKINS_ENABLED or False }}
                JENKINS_ENABLED = False
                JENKINS_HOST = "{{ JENKINS_HOST }}"
                JENKINS_USER = "{{ JENKINS_API_USER }}"
                JENKINS_API_KEY = "{{ JENKINS_API_KEY }}"
            EOT
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "mozart-settings"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.netrc will be created
  + resource "kubernetes_config_map" "netrc" {
      + data = {
          + ".netrc" = <<-EOT
                machine rabbitmq
                login guest
                password guest
            EOT
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "netrc"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.sounder-sips-static-data will be created
  + resource "kubernetes_config_map" "sounder-sips-static-data" {
      + data = {
          + "SNDR.SNPP.ATMS.L1A.nominal2.01.nc" = "/fr/xTvMMzmYM5cdc8EBP4le6/hGhNtN8BhcoywC4dg="
          + "SNDR.SNPP.ATMS.L1A.nominal2.02.nc" = "mcQnpDZqprF632U0AwC9iXI7bjeBtxRNFHMOJt8IwBI="
          + "SNDR.SNPP.ATMS.L1A.nominal2.03.nc" = "7a6Ss/mIcbkXcHegUEWJsZycjqUByAw+enwOqeSUiCU="
          + "SNDR.SNPP.ATMS.L1A.nominal2.04.nc" = "LqLj7VPmw7aqMwSjOhAGR0FkVIeDqHkgiOXpPm56eV0="
          + "SNDR.SNPP.ATMS.L1A.nominal2.05.nc" = "2OruVTwNfH/Ul6FDOfg5GtQtVonCqKnC5glS00PsS64="
          + "SNDR.SNPP.ATMS.L1A.nominal2.06.nc" = "R7ngL1FTBUq4HRWeBM8iKcrpBEXNppM79YNgFPU54ZM="
          + "SNDR.SNPP.ATMS.L1A.nominal2.07.nc" = "+vT8Hvpzfcj6EG0g+VgrN43Oxkibt/FeP8s7h8+54TM="
          + "SNDR.SNPP.ATMS.L1A.nominal2.08.nc" = "jAEgoQvznqXO76cxbh0WmY0ox2NiY4Dx/Xckxkim4cc="
          + "SNDR.SNPP.ATMS.L1A.nominal2.09.nc" = "Dm+GkN/ppq03gEeFjLZ3aZBp8bMF4pMD9DbJyorkeQM="
          + "SNDR.SNPP.ATMS.L1A.nominal2.10.nc" = "+T6eR5t9s+Pu00illewLGrsYDwVw8BAOjteKZbUXRUA="
          + "SNDR.SNPP.ATMS.L1A.nominal2.11.nc" = "TeCgjDUji7CpghPHQvXBr6HT/EBFDOz7OxCKisJiWbI="
          + "SNDR.SNPP.ATMS.L1A.nominal2.12.nc" = "ctE2hkPmnKNjjxaPFk1gfKUpTIR0WzIdHETEIxZ35Ig="
          + "SNDR.SNPP.ATMS.L1A.nominal2.13.nc" = "8zvHZgsSRuZ4UB8mmR9LnayHGYZ1E/Nl4hpiyie51h0="
          + "SNDR.SNPP.ATMS.L1A.nominal2.14.nc" = "+JXRwyErNj1cHQDVgZVtvAVtPdP2jFAOv014l/WQNgo="
          + "SNDR.SNPP.ATMS.L1A.nominal2.15.nc" = "dYkPg/kzuaOAVOKBch83n3FosqKuoKTyYr+5FIA8uJs="
          + "SNDR.SNPP.ATMS.L1A.nominal2.16.nc" = "uNlQTuYKvLXfwemUMyLz9icgEiwgn8DIxPijWFoLUWo="
          + "SNDR.SNPP.ATMS.L1A.nominal2.17.nc" = "vbKEsp8HDrWRw9XdTfo25Lm908h41B7di2cgaMw0K3U="
          + "SNDR.SNPP.ATMS.L1A.nominal2.18.nc" = "Ue1q0nOHLp3JdFIalgyiNNAtuhyISkphSimSYezJFGk="
          + "SNDR.SNPP.ATMS.L1A.nominal2.19.nc" = "KhoOaWTsy8mlLUOmeiYiaGxwkFszNu4TNQwiwyFsj+I="
          + "SNDR.SNPP.ATMS.L1A.nominal2.20.nc" = "YJ0jgbocbhwQXU7Qgz2FlXQGdYXOACyyjiTm7dzyzLc="
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "sounder-sips-static-data"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.supervisord-job-worker will be created
  + resource "kubernetes_config_map" "supervisord-job-worker" {
      + data = {
          + "supervisord.conf" = <<-EOT
                [supervisord]
                
                [program:factotum-job_worker-small]
                directory=/home/ops/hysds
                environment=HYSDS_ROOT_WORK_DIR="/private/tmp/data/work",
                            HYSDS_DATASETS_CFG="/home/ops/datasets.json"
                command=celery --app=hysds worker --concurrency=1 --loglevel=INFO -Q factotum-job_worker-small -n %(program_name)s.%(process_num)02d.%%h -O fair --without-mingle --without-gossip --heartbeat-interval=60
                process_name=%(program_name)s-%(process_num)02d
                priority=1
                numprocs=1
                numprocs_start=0
                redirect_stderr=true
                stdout_logfile=/home/ops/%(program_name)s-%(process_num)02d.log
                stdout_logfile_maxbytes=20MB
                stdout_logfile_backups=1
                startsecs=10
                
                [program:factotum-job_worker-large]
                directory=/home/ops/hysds
                environment=HYSDS_ROOT_WORK_DIR="/private/tmp/data/work",
                            HYSDS_DATASETS_CFG="/home/ops/datasets.json"
                command=celery --app=hysds worker --concurrency=1 --loglevel=INFO -Q factotum-job_worker-large -n %(program_name)s.%(process_num)02d.%%h -O fair --without-mingle --without-gossip --heartbeat-interval=60
                process_name=%(program_name)s-%(process_num)02d
                priority=1
                numprocs=1
                numprocs_start=0
                redirect_stderr=true
                stdout_logfile=/home/ops/%(program_name)s-%(process_num)02d.log
                stdout_logfile_maxbytes=20MB
                stdout_logfile_backups=1
                startsecs=10
                
                [program:system-jobs-queue]
                directory=/home/ops/hysds
                environment=HYSDS_ROOT_WORK_DIR="/private/tmp/data/work",
                            HYSDS_DATASETS_CFG="/home/ops/datasets.json"
                command=celery --app=hysds worker --concurrency=1 --loglevel=INFO -Q system-jobs-queue -n %(program_name)s.%(process_num)02d.%%h -O fair --without-mingle --without-gossip --heartbeat-interval=60
                process_name=%(program_name)s-%(process_num)02d
                priority=1
                numprocs=2
                numprocs_start=0
                redirect_stderr=true
                stdout_logfile=/home/ops/%(program_name)s-%(process_num)02d.log
                stdout_logfile_maxbytes=20MB
                stdout_logfile_backups=1
                startsecs=10
            EOT
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "supervisord-job-worker"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.supervisord-orchestrator will be created
  + resource "kubernetes_config_map" "supervisord-orchestrator" {
      + data = {
          + "supervisord.conf" = <<-EOT
                [supervisord]
                
                [program:orchestrator_datasets]
                directory=/home/ops/hysds
                environment=HYSDS_ORCHESTRATOR_CFG="/home/ops/hysds/configs/orchestrator/orchestrator_datasets.json",
                            HYSDS_JOB_CREATORS_DIR="/home/ops/hysds/scripts/job_creators"
                command=celery --app=hysds worker --concurrency=1 --loglevel=INFO -Q dataset_processed -n %(program_name)s.%(process_num)02d.%%h -O fair --without-mingle --without-gossip --heartbeat-interval=60
                process_name=%(program_name)s-%(process_num)02d
                priority=1
                numprocs=2
                numprocs_start=0
                redirect_stderr=true
                stdout_logfile=/home/ops/%(program_name)s-%(process_num)02d.log
                stdout_logfile_maxbytes=20MB
                stdout_logfile_backups=1
                startsecs=10
                
                [program:orchestrator_jobs]
                directory=/home/ops/hysds
                environment=HYSDS_ORCHESTRATOR_CFG="/home/ops/hysds/configs/orchestrator/orchestrator_jobs.json",
                            HYSDS_JOB_CREATORS_DIR="/home/ops/hysds/scripts/job_creators"
                command=celery --app=hysds worker --concurrency=1 --loglevel=INFO -Q jobs_processed -n %(program_name)s.%(process_num)02d.%%h -O fair --without-mingle --without-gossip --heartbeat-interval=60
                process_name=%(program_name)s-%(process_num)02d
                priority=1
                numprocs=2
                numprocs_start=0
                redirect_stderr=true
                stdout_logfile=/home/ops/%(program_name)s-%(process_num)02d.log
                stdout_logfile_maxbytes=20MB
                stdout_logfile_backups=1
                startsecs=10
                
                [program:on_demand_job]
                directory=/home/ops/hysds
                command=celery --app=hysds worker --concurrency=1 --loglevel=INFO -Q on_demand_job -n %(program_name)s.%(process_num)02d.%%h -O fair --without-mingle --without-gossip --heartbeat-interval=60
                process_name=%(program_name)s-%(process_num)02d
                priority=1
                numprocs=2
                numprocs_start=0
                redirect_stderr=true
                stdout_logfile=/home/ops/%(program_name)s-%(process_num)02d.log
                stdout_logfile_maxbytes=20MB
                stdout_logfile_backups=1
                startsecs=10
                
                [program:on_demand_dataset]
                directory=/home/ops/hysds
                command=celery --app=hysds worker --concurrency=1 --loglevel=INFO -Q on_demand_dataset -n %(program_name)s.%(process_num)02d.%%h -O fair --without-mingle --without-gossip --heartbeat-interval=60
                process_name=%(program_name)s-%(process_num)02d
                priority=1
                numprocs=2
                numprocs_start=0
                redirect_stderr=true
                stdout_logfile=/home/ops/%(program_name)s-%(process_num)02d.log
                stdout_logfile_maxbytes=20MB
                stdout_logfile_backups=1
                startsecs=10
            EOT
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "supervisord-orchestrator"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.supervisord-user-rules will be created
  + resource "kubernetes_config_map" "supervisord-user-rules" {
      + data = {
          + "supervisord.conf" = <<-EOT
                [supervisord]
                
                [program:user_rules_job]
                directory=/home/ops/hysds
                command=celery --app=hysds worker --concurrency=1 --loglevel=INFO -Q user_rules_job -n %(program_name)s.%(process_num)02d.%%h -O fair --without-mingle --without-gossip --heartbeat-interval=60
                process_name=%(program_name)s-%(process_num)02d
                priority=1
                numprocs=2
                numprocs_start=0
                redirect_stderr=true
                stdout_logfile=/home/ops/%(program_name)s-%(process_num)02d.log
                stdout_logfile_maxbytes=20MB
                stdout_logfile_backups=1
                startsecs=10
                
                [program:user_rules_dataset]
                directory=/home/ops/hysds
                command=celery --app=hysds worker --concurrency=1 --loglevel=INFO -Q user_rules_dataset -n %(program_name)s.%(process_num)02d.%%h -O fair --without-mingle --without-gossip --heartbeat-interval=60
                process_name=%(program_name)s-%(process_num)02d
                priority=1
                numprocs=2
                numprocs_start=0
                redirect_stderr=true
                stdout_logfile=/home/ops/%(program_name)s-%(process_num)02d.log
                stdout_logfile_maxbytes=20MB
                stdout_logfile_backups=1
                startsecs=10
            EOT
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "supervisord-user-rules"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_config_map.supervisord-verdi will be created
  + resource "kubernetes_config_map" "supervisord-verdi" {
      + data = {
          + "supervisord.conf" = <<-EOT
                [supervisord]
                
                [program:verdi-job_worker]
                directory=/home/ops/hysds
                environment=HYSDS_ROOT_WORK_DIR="/private/tmp/data/work",
                            HYSDS_DATASETS_CFG="/home/ops/datasets.json"
                command=celery --app=hysds worker --concurrency=1 --loglevel=INFO -Q verdi-job_worker -n %(program_name)s.%(process_num)02d.%%h -O fair --without-mingle --without-gossip --heartbeat-interval=60
                process_name=%(program_name)s-%(process_num)02d
                priority=1
                numprocs=1
                numprocs_start=0
                redirect_stderr=true
                stdout_logfile=/home/ops/%(program_name)s-%(process_num)02d.log
                stdout_logfile_maxbytes=100MB
                stdout_logfile_backups=1
                startsecs=10
            EOT
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "supervisord-verdi"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_deployment.ades-wpst-api will be created
  + resource "kubernetes_deployment" "ades-wpst-api" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "ades-wpst-api"
            }
          + name             = "ades-wpst-api"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = (known after apply)
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "ades-wpst-api"
                }
            }

          + strategy {
              + type = (known after apply)

              + rolling_update {
                  + max_surge       = (known after apply)
                  + max_unavailable = (known after apply)
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "ades-wpst-api"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "ghcr.io/unity-sds/unity-sps-prototype/ades-wpst-api:unity-v0.0.1"
                      + image_pull_policy          = (known after apply)
                      + name                       = "ades-wpst-api"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env {
                          + name  = "ADES_PLATFORM"
                          + value = "Generic"
                        }

                      + port {
                          + container_port = 5000
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/ades_wpst/sqlite"
                          + mount_propagation = "None"
                          + name              = "sqlite-db"
                          + read_only         = false
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + volume {
                      + name = "sqlite-db"

                      + persistent_volume_claim {
                          + claim_name = "ades-wpst-sqlite-pv-claim"
                          + read_only  = false
                        }
                    }
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_deployment.factotum-job-worker will be created
  + resource "kubernetes_deployment" "factotum-job-worker" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "factotum-job-worker"
            }
          + name             = "factotum-job-worker"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = (known after apply)
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "factotum-job-worker"
                }
            }

          + strategy {
              + type = (known after apply)

              + rolling_update {
                  + max_surge       = (known after apply)
                  + max_unavailable = (known after apply)
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "factotum-job-worker"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + command                    = [
                          + "supervisord",
                          + "--nodaemon",
                        ]
                      + image                      = "ghcr.io/unity-sds/unity-sps-prototype/hysds-verdi:unity-v0.0.1"
                      + image_pull_policy          = (known after apply)
                      + name                       = "factotum-job-worker"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/var/run/docker.sock"
                          + mount_propagation = "None"
                          + name              = "docker-sock"
                          + read_only         = false
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/hysds/celeryconfig.py"
                          + mount_propagation = "None"
                          + name              = "celeryconfig"
                          + read_only         = false
                          + sub_path          = "celeryconfig.py"
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/datasets.json"
                          + mount_propagation = "None"
                          + name              = "datasets"
                          + read_only         = false
                          + sub_path          = "datasets.json"
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/supervisord.conf"
                          + mount_propagation = "None"
                          + name              = "supervisord-job-worker"
                          + read_only         = false
                          + sub_path          = "supervisord.conf"
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/.aws/credentials"
                          + mount_propagation = "None"
                          + name              = "aws-credentials"
                          + read_only         = false
                          + sub_path          = "aws-credentials"
                        }
                      + volume_mount {
                          + mount_path        = "/private/tmp/data"
                          + mount_propagation = "None"
                          + name              = "data-work"
                          + read_only         = false
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + init_container {
                      + command                    = [
                          + "/bin/sh",
                          + "-c",
                          + "chmod 777 /var/run/docker.sock; chown -R 1000:1000 /private/tmp/data;",
                        ]
                      + image                      = "k8s.gcr.io/busybox"
                      + image_pull_policy          = (known after apply)
                      + name                       = "changeume-ownership"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/var/run/docker.sock"
                          + mount_propagation = "None"
                          + name              = "docker-sock"
                          + read_only         = false
                        }
                      + volume_mount {
                          + mount_path        = "/private/tmp/data"
                          + mount_propagation = "None"
                          + name              = "data-work"
                          + read_only         = false
                        }
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + volume {
                      + name = "docker-sock"

                      + host_path {
                          + path = "/var/run/docker.sock"
                        }
                    }
                  + volume {
                      + name = "celeryconfig"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "celeryconfig"
                        }
                    }
                  + volume {
                      + name = "datasets"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "datasets"
                        }
                    }
                  + volume {
                      + name = "supervisord-job-worker"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "supervisord-job-worker"
                        }
                    }
                  + volume {
                      + name = "aws-credentials"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "aws-credentials"
                        }
                    }
                  + volume {
                      + name = "data-work"

                      + host_path {
                          + path = "/private/tmp/data"
                        }
                    }
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_deployment.grq2 will be created
  + resource "kubernetes_deployment" "grq2" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "grq2"
            }
          + name             = "grq2"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = (known after apply)
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "grq2"
                }
            }

          + strategy {
              + type = (known after apply)

              + rolling_update {
                  + max_surge       = (known after apply)
                  + max_unavailable = (known after apply)
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "grq2"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "ghcr.io/unity-sds/unity-sps-prototype/hysds-grq2:unity-v0.0.1"
                      + image_pull_policy          = (known after apply)
                      + name                       = "grq2"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + port {
                          + container_port = 8878
                          + name           = "grq2"
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/home/ops/grq2/settings.cfg"
                          + mount_propagation = "None"
                          + name              = "grq2-settings"
                          + read_only         = false
                          + sub_path          = "settings.cfg"
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/grq2/celeryconfig.py"
                          + mount_propagation = "None"
                          + name              = "celeryconfig"
                          + read_only         = false
                          + sub_path          = "celeryconfig.py"
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/.netrc"
                          + mount_propagation = "None"
                          + name              = "netrc"
                          + read_only         = false
                          + sub_path          = ".netrc"
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + volume {
                      + name = "grq2-settings"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "grq2-settings"
                        }
                    }
                  + volume {
                      + name = "celeryconfig"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "celeryconfig"
                        }
                    }
                  + volume {
                      + name = "netrc"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "netrc"
                        }
                    }
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_deployment.hysds-ui will be created
  + resource "kubernetes_deployment" "hysds-ui" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + name             = "hysds-ui"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = (known after apply)
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "hysds-ui"
                }
            }

          + strategy {
              + type = (known after apply)

              + rolling_update {
                  + max_surge       = (known after apply)
                  + max_unavailable = (known after apply)
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "hysds-ui"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "ghcr.io/unity-sds/unity-sps-prototype/hysds-ui-remote:unity-v0.0.1"
                      + image_pull_policy          = "Always"
                      + name                       = "hysds-ui"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + port {
                          + container_port = 80
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + volume {
                      + name = (known after apply)

                      + aws_elastic_block_store {
                          + fs_type   = (known after apply)
                          + partition = (known after apply)
                          + read_only = (known after apply)
                          + volume_id = (known after apply)
                        }

                      + azure_disk {
                          + caching_mode  = (known after apply)
                          + data_disk_uri = (known after apply)
                          + disk_name     = (known after apply)
                          + fs_type       = (known after apply)
                          + kind          = (known after apply)
                          + read_only     = (known after apply)
                        }

                      + azure_file {
                          + read_only        = (known after apply)
                          + secret_name      = (known after apply)
                          + secret_namespace = (known after apply)
                          + share_name       = (known after apply)
                        }

                      + ceph_fs {
                          + monitors    = (known after apply)
                          + path        = (known after apply)
                          + read_only   = (known after apply)
                          + secret_file = (known after apply)
                          + user        = (known after apply)

                          + secret_ref {
                              + name      = (known after apply)
                              + namespace = (known after apply)
                            }
                        }

                      + cinder {
                          + fs_type   = (known after apply)
                          + read_only = (known after apply)
                          + volume_id = (known after apply)
                        }

                      + config_map {
                          + default_mode = (known after apply)
                          + name         = (known after apply)
                          + optional     = (known after apply)

                          + items {
                              + key  = (known after apply)
                              + mode = (known after apply)
                              + path = (known after apply)
                            }
                        }

                      + csi {
                          + driver            = (known after apply)
                          + fs_type           = (known after apply)
                          + read_only         = (known after apply)
                          + volume_attributes = (known after apply)

                          + node_publish_secret_ref {
                              + name = (known after apply)
                            }
                        }

                      + downward_api {
                          + default_mode = (known after apply)

                          + items {
                              + mode = (known after apply)
                              + path = (known after apply)

                              + field_ref {
                                  + api_version = (known after apply)
                                  + field_path  = (known after apply)
                                }

                              + resource_field_ref {
                                  + container_name = (known after apply)
                                  + divisor        = (known after apply)
                                  + resource       = (known after apply)
                                }
                            }
                        }

                      + empty_dir {
                          + medium     = (known after apply)
                          + size_limit = (known after apply)
                        }

                      + fc {
                          + fs_type      = (known after apply)
                          + lun          = (known after apply)
                          + read_only    = (known after apply)
                          + target_ww_ns = (known after apply)
                        }

                      + flex_volume {
                          + driver    = (known after apply)
                          + fs_type   = (known after apply)
                          + options   = (known after apply)
                          + read_only = (known after apply)

                          + secret_ref {
                              + name      = (known after apply)
                              + namespace = (known after apply)
                            }
                        }

                      + flocker {
                          + dataset_name = (known after apply)
                          + dataset_uuid = (known after apply)
                        }

                      + gce_persistent_disk {
                          + fs_type   = (known after apply)
                          + partition = (known after apply)
                          + pd_name   = (known after apply)
                          + read_only = (known after apply)
                        }

                      + git_repo {
                          + directory  = (known after apply)
                          + repository = (known after apply)
                          + revision   = (known after apply)
                        }

                      + glusterfs {
                          + endpoints_name = (known after apply)
                          + path           = (known after apply)
                          + read_only      = (known after apply)
                        }

                      + host_path {
                          + path = (known after apply)
                          + type = (known after apply)
                        }

                      + iscsi {
                          + fs_type         = (known after apply)
                          + iqn             = (known after apply)
                          + iscsi_interface = (known after apply)
                          + lun             = (known after apply)
                          + read_only       = (known after apply)
                          + target_portal   = (known after apply)
                        }

                      + local {
                          + path = (known after apply)
                        }

                      + nfs {
                          + path      = (known after apply)
                          + read_only = (known after apply)
                          + server    = (known after apply)
                        }

                      + persistent_volume_claim {
                          + claim_name = (known after apply)
                          + read_only  = (known after apply)
                        }

                      + photon_persistent_disk {
                          + fs_type = (known after apply)
                          + pd_id   = (known after apply)
                        }

                      + projected {
                          + default_mode = (known after apply)

                          + sources {
                              + config_map {
                                  + name     = (known after apply)
                                  + optional = (known after apply)

                                  + items {
                                      + key  = (known after apply)
                                      + mode = (known after apply)
                                      + path = (known after apply)
                                    }
                                }

                              + downward_api {
                                  + items {
                                      + mode = (known after apply)
                                      + path = (known after apply)

                                      + field_ref {
                                          + api_version = (known after apply)
                                          + field_path  = (known after apply)
                                        }

                                      + resource_field_ref {
                                          + container_name = (known after apply)
                                          + divisor        = (known after apply)
                                          + resource       = (known after apply)
                                        }
                                    }
                                }

                              + secret {
                                  + name     = (known after apply)
                                  + optional = (known after apply)

                                  + items {
                                      + key  = (known after apply)
                                      + mode = (known after apply)
                                      + path = (known after apply)
                                    }
                                }

                              + service_account_token {
                                  + audience           = (known after apply)
                                  + expiration_seconds = (known after apply)
                                  + path               = (known after apply)
                                }
                            }
                        }

                      + quobyte {
                          + group     = (known after apply)
                          + read_only = (known after apply)
                          + registry  = (known after apply)
                          + user      = (known after apply)
                          + volume    = (known after apply)
                        }

                      + rbd {
                          + ceph_monitors = (known after apply)
                          + fs_type       = (known after apply)
                          + keyring       = (known after apply)
                          + rados_user    = (known after apply)
                          + rbd_image     = (known after apply)
                          + rbd_pool      = (known after apply)
                          + read_only     = (known after apply)

                          + secret_ref {
                              + name      = (known after apply)
                              + namespace = (known after apply)
                            }
                        }

                      + secret {
                          + default_mode = (known after apply)
                          + optional     = (known after apply)
                          + secret_name  = (known after apply)

                          + items {
                              + key  = (known after apply)
                              + mode = (known after apply)
                              + path = (known after apply)
                            }
                        }

                      + vsphere_volume {
                          + fs_type     = (known after apply)
                          + volume_path = (known after apply)
                        }
                    }
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_deployment.logstash will be created
  + resource "kubernetes_deployment" "logstash" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "logstash"
            }
          + name             = "logstash"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = (known after apply)
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "logstash"
                }
            }

          + strategy {
              + type = (known after apply)

              + rolling_update {
                  + max_surge       = (known after apply)
                  + max_unavailable = (known after apply)
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "logstash"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + args                       = [
                          + "-f",
                          + "/usr/share/logstash/logstash.conf",
                        ]
                      + command                    = [
                          + "bin/logstash",
                        ]
                      + image                      = "docker.elastic.co/logstash/logstash:7.10.2"
                      + image_pull_policy          = (known after apply)
                      + name                       = "logstash"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + port {
                          + container_port = 5044
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/usr/share/logstash/logstash.conf"
                          + mount_propagation = "None"
                          + name              = "logstash-configs"
                          + read_only         = false
                          + sub_path          = "logstash-conf"
                        }
                      + volume_mount {
                          + mount_path        = "/usr/share/logstash/job_status.template.json"
                          + mount_propagation = "None"
                          + name              = "logstash-configs"
                          + read_only         = false
                          + sub_path          = "job-status"
                        }
                      + volume_mount {
                          + mount_path        = "/usr/share/logstash/task_status.template.json"
                          + mount_propagation = "None"
                          + name              = "logstash-configs"
                          + read_only         = false
                          + sub_path          = "task-status"
                        }
                      + volume_mount {
                          + mount_path        = "/usr/share/logstash/event_status.template.json"
                          + mount_propagation = "None"
                          + name              = "logstash-configs"
                          + read_only         = false
                          + sub_path          = "event-status"
                        }
                      + volume_mount {
                          + mount_path        = "/usr/share/logstash/worker_status.template.json"
                          + mount_propagation = "None"
                          + name              = "logstash-configs"
                          + read_only         = false
                          + sub_path          = "worker-status"
                        }
                      + volume_mount {
                          + mount_path        = "/usr/share/logstash/config/logstash.yml"
                          + mount_propagation = "None"
                          + name              = "logstash-configs"
                          + read_only         = false
                          + sub_path          = "logstash-yml"
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + volume {
                      + name = "logstash-configs"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "logstash-configs"
                        }
                    }
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_deployment.minio will be created
  + resource "kubernetes_deployment" "minio" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "minio"
            }
          + name             = "minio"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = (known after apply)
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "minio"
                }
            }

          + strategy {
              + type = "Recreate"

              + rolling_update {
                  + max_surge       = (known after apply)
                  + max_unavailable = (known after apply)
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "minio"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + args                       = [
                          + "server",
                          + "/storage",
                          + "--console-address=:9001",
                        ]
                      + image                      = "minio/minio:RELEASE.2022-03-17T06-34-49Z"
                      + image_pull_policy          = (known after apply)
                      + name                       = "minio"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env {
                          + name  = "MINIO_ACCESS_KEY"
                          + value = "hysds"
                        }
                      + env {
                          + name  = "MINIO_SECRET_KEY"
                          + value = "password"
                        }

                      + port {
                          + container_port = 9000
                          + host_port      = 9000
                          + protocol       = "TCP"
                        }
                      + port {
                          + container_port = 9001
                          + host_port      = 9001
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/storage"
                          + mount_propagation = "None"
                          + name              = "storage"
                          + read_only         = false
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + volume {
                      + name = "storage"

                      + persistent_volume_claim {
                          + claim_name = "minio-pv-claim"
                          + read_only  = false
                        }
                    }
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_deployment.mozart will be created
  + resource "kubernetes_deployment" "mozart" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "mozart"
            }
          + name             = "mozart"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = (known after apply)
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "mozart"
                }
            }

          + strategy {
              + type = (known after apply)

              + rolling_update {
                  + max_surge       = (known after apply)
                  + max_unavailable = (known after apply)
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "mozart"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "ghcr.io/unity-sds/unity-sps-prototype/hysds-mozart:unity-v0.0.1"
                      + image_pull_policy          = (known after apply)
                      + name                       = "mozart"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + port {
                          + container_port = 8888
                          + name           = "mozart"
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/home/ops/mozart/settings.cfg"
                          + mount_propagation = "None"
                          + name              = "mozart-settings"
                          + read_only         = false
                          + sub_path          = "settings.cfg"
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/mozart/celeryconfig.py"
                          + mount_propagation = "None"
                          + name              = "celeryconfig"
                          + read_only         = false
                          + sub_path          = "celeryconfig.py"
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/.netrc"
                          + mount_propagation = "None"
                          + name              = "netrc"
                          + read_only         = false
                          + sub_path          = ".netrc"
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + volume {
                      + name = "mozart-settings"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "mozart-settings"
                        }
                    }
                  + volume {
                      + name = "celeryconfig"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "celeryconfig"
                        }
                    }
                  + volume {
                      + name = "netrc"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "netrc"
                        }
                    }
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_deployment.orchestrator will be created
  + resource "kubernetes_deployment" "orchestrator" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "orchestrator"
            }
          + name             = "orchestrator"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = (known after apply)
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "orchestrator"
                }
            }

          + strategy {
              + type = (known after apply)

              + rolling_update {
                  + max_surge       = (known after apply)
                  + max_unavailable = (known after apply)
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "orchestrator"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + command                    = [
                          + "supervisord",
                          + "--nodaemon",
                        ]
                      + image                      = "ghcr.io/unity-sds/unity-sps-prototype/hysds-core:unity-v0.0.1"
                      + image_pull_policy          = (known after apply)
                      + name                       = "orchestrator"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/home/ops/hysds/celeryconfig.py"
                          + mount_propagation = "None"
                          + name              = "celeryconfig"
                          + read_only         = false
                          + sub_path          = "celeryconfig.py"
                        }
                      + volume_mount {
                          + mount_path        = "/etc/supervisord.conf"
                          + mount_propagation = "None"
                          + name              = "supervisord-orchestrator"
                          + read_only         = false
                          + sub_path          = "supervisord.conf"
                        }
                      + volume_mount {
                          + mount_path        = "/private/tmp/data"
                          + mount_propagation = "None"
                          + name              = "data-work"
                          + read_only         = false
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + security_context {
                      + run_as_group = "0"
                      + run_as_user  = "0"
                    }

                  + volume {
                      + name = "celeryconfig"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "celeryconfig"
                        }
                    }
                  + volume {
                      + name = "supervisord-orchestrator"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "supervisord-orchestrator"
                        }
                    }
                  + volume {
                      + name = "data-work"

                      + host_path {
                          + path = "/private/tmp/data"
                        }
                    }
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_deployment.redis will be created
  + resource "kubernetes_deployment" "redis" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "redis"
            }
          + name             = "redis"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = (known after apply)
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "redis"
                }
            }

          + strategy {
              + type = (known after apply)

              + rolling_update {
                  + max_surge       = (known after apply)
                  + max_unavailable = (known after apply)
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "redis"
                    }
                  + name             = (known after apply)
                  + namespace        = "unity-sps"
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "redis:latest"
                      + image_pull_policy          = "IfNotPresent"
                      + name                       = "redis"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + port {
                          + container_port = 6379
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + volume {
                      + name = (known after apply)

                      + aws_elastic_block_store {
                          + fs_type   = (known after apply)
                          + partition = (known after apply)
                          + read_only = (known after apply)
                          + volume_id = (known after apply)
                        }

                      + azure_disk {
                          + caching_mode  = (known after apply)
                          + data_disk_uri = (known after apply)
                          + disk_name     = (known after apply)
                          + fs_type       = (known after apply)
                          + kind          = (known after apply)
                          + read_only     = (known after apply)
                        }

                      + azure_file {
                          + read_only        = (known after apply)
                          + secret_name      = (known after apply)
                          + secret_namespace = (known after apply)
                          + share_name       = (known after apply)
                        }

                      + ceph_fs {
                          + monitors    = (known after apply)
                          + path        = (known after apply)
                          + read_only   = (known after apply)
                          + secret_file = (known after apply)
                          + user        = (known after apply)

                          + secret_ref {
                              + name      = (known after apply)
                              + namespace = (known after apply)
                            }
                        }

                      + cinder {
                          + fs_type   = (known after apply)
                          + read_only = (known after apply)
                          + volume_id = (known after apply)
                        }

                      + config_map {
                          + default_mode = (known after apply)
                          + name         = (known after apply)
                          + optional     = (known after apply)

                          + items {
                              + key  = (known after apply)
                              + mode = (known after apply)
                              + path = (known after apply)
                            }
                        }

                      + csi {
                          + driver            = (known after apply)
                          + fs_type           = (known after apply)
                          + read_only         = (known after apply)
                          + volume_attributes = (known after apply)

                          + node_publish_secret_ref {
                              + name = (known after apply)
                            }
                        }

                      + downward_api {
                          + default_mode = (known after apply)

                          + items {
                              + mode = (known after apply)
                              + path = (known after apply)

                              + field_ref {
                                  + api_version = (known after apply)
                                  + field_path  = (known after apply)
                                }

                              + resource_field_ref {
                                  + container_name = (known after apply)
                                  + divisor        = (known after apply)
                                  + resource       = (known after apply)
                                }
                            }
                        }

                      + empty_dir {
                          + medium     = (known after apply)
                          + size_limit = (known after apply)
                        }

                      + fc {
                          + fs_type      = (known after apply)
                          + lun          = (known after apply)
                          + read_only    = (known after apply)
                          + target_ww_ns = (known after apply)
                        }

                      + flex_volume {
                          + driver    = (known after apply)
                          + fs_type   = (known after apply)
                          + options   = (known after apply)
                          + read_only = (known after apply)

                          + secret_ref {
                              + name      = (known after apply)
                              + namespace = (known after apply)
                            }
                        }

                      + flocker {
                          + dataset_name = (known after apply)
                          + dataset_uuid = (known after apply)
                        }

                      + gce_persistent_disk {
                          + fs_type   = (known after apply)
                          + partition = (known after apply)
                          + pd_name   = (known after apply)
                          + read_only = (known after apply)
                        }

                      + git_repo {
                          + directory  = (known after apply)
                          + repository = (known after apply)
                          + revision   = (known after apply)
                        }

                      + glusterfs {
                          + endpoints_name = (known after apply)
                          + path           = (known after apply)
                          + read_only      = (known after apply)
                        }

                      + host_path {
                          + path = (known after apply)
                          + type = (known after apply)
                        }

                      + iscsi {
                          + fs_type         = (known after apply)
                          + iqn             = (known after apply)
                          + iscsi_interface = (known after apply)
                          + lun             = (known after apply)
                          + read_only       = (known after apply)
                          + target_portal   = (known after apply)
                        }

                      + local {
                          + path = (known after apply)
                        }

                      + nfs {
                          + path      = (known after apply)
                          + read_only = (known after apply)
                          + server    = (known after apply)
                        }

                      + persistent_volume_claim {
                          + claim_name = (known after apply)
                          + read_only  = (known after apply)
                        }

                      + photon_persistent_disk {
                          + fs_type = (known after apply)
                          + pd_id   = (known after apply)
                        }

                      + projected {
                          + default_mode = (known after apply)

                          + sources {
                              + config_map {
                                  + name     = (known after apply)
                                  + optional = (known after apply)

                                  + items {
                                      + key  = (known after apply)
                                      + mode = (known after apply)
                                      + path = (known after apply)
                                    }
                                }

                              + downward_api {
                                  + items {
                                      + mode = (known after apply)
                                      + path = (known after apply)

                                      + field_ref {
                                          + api_version = (known after apply)
                                          + field_path  = (known after apply)
                                        }

                                      + resource_field_ref {
                                          + container_name = (known after apply)
                                          + divisor        = (known after apply)
                                          + resource       = (known after apply)
                                        }
                                    }
                                }

                              + secret {
                                  + name     = (known after apply)
                                  + optional = (known after apply)

                                  + items {
                                      + key  = (known after apply)
                                      + mode = (known after apply)
                                      + path = (known after apply)
                                    }
                                }

                              + service_account_token {
                                  + audience           = (known after apply)
                                  + expiration_seconds = (known after apply)
                                  + path               = (known after apply)
                                }
                            }
                        }

                      + quobyte {
                          + group     = (known after apply)
                          + read_only = (known after apply)
                          + registry  = (known after apply)
                          + user      = (known after apply)
                          + volume    = (known after apply)
                        }

                      + rbd {
                          + ceph_monitors = (known after apply)
                          + fs_type       = (known after apply)
                          + keyring       = (known after apply)
                          + rados_user    = (known after apply)
                          + rbd_image     = (known after apply)
                          + rbd_pool      = (known after apply)
                          + read_only     = (known after apply)

                          + secret_ref {
                              + name      = (known after apply)
                              + namespace = (known after apply)
                            }
                        }

                      + secret {
                          + default_mode = (known after apply)
                          + optional     = (known after apply)
                          + secret_name  = (known after apply)

                          + items {
                              + key  = (known after apply)
                              + mode = (known after apply)
                              + path = (known after apply)
                            }
                        }

                      + vsphere_volume {
                          + fs_type     = (known after apply)
                          + volume_path = (known after apply)
                        }
                    }
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_deployment.user-rules will be created
  + resource "kubernetes_deployment" "user-rules" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "user-rules"
            }
          + name             = "user-rules"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = (known after apply)
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "user-rules"
                }
            }

          + strategy {
              + type = (known after apply)

              + rolling_update {
                  + max_surge       = (known after apply)
                  + max_unavailable = (known after apply)
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "user-rules"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + command                    = [
                          + "supervisord",
                          + "--nodaemon",
                        ]
                      + image                      = "ghcr.io/unity-sds/unity-sps-prototype/hysds-core:unity-v0.0.1"
                      + image_pull_policy          = (known after apply)
                      + name                       = "user-rules"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/home/ops/hysds/celeryconfig.py"
                          + mount_propagation = "None"
                          + name              = "celeryconfig"
                          + read_only         = false
                          + sub_path          = "celeryconfig.py"
                        }
                      + volume_mount {
                          + mount_path        = "/etc/supervisord.conf"
                          + mount_propagation = "None"
                          + name              = "supervisord-user-rules"
                          + read_only         = false
                          + sub_path          = "supervisord.conf"
                        }
                      + volume_mount {
                          + mount_path        = "/private/tmp/data"
                          + mount_propagation = "None"
                          + name              = "data-work"
                          + read_only         = false
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + security_context {
                      + run_as_group = "0"
                      + run_as_user  = "0"
                    }

                  + volume {
                      + name = "celeryconfig"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "celeryconfig"
                        }
                    }
                  + volume {
                      + name = "supervisord-user-rules"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "supervisord-user-rules"
                        }
                    }
                  + volume {
                      + name = "data-work"

                      + host_path {
                          + path = "/private/tmp/data"
                        }
                    }
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_deployment.verdi will be created
  + resource "kubernetes_deployment" "verdi" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "verdi"
            }
          + name             = "verdi"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = (known after apply)
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "verdi"
                }
            }

          + strategy {
              + type = (known after apply)

              + rolling_update {
                  + max_surge       = (known after apply)
                  + max_unavailable = (known after apply)
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "verdi"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "docker:dind"
                      + image_pull_policy          = (known after apply)
                      + name                       = "dind-daemon"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env {
                          + name = "DOCKER_TLS_CERTDIR"
                        }

                      + lifecycle {
                          + post_start {
                              + exec {
                                  + command = [
                                      + "bin/sh",
                                      + "-c",
                                      + "sleep 5; chmod 777 /var/run/docker.sock",
                                    ]
                                }
                            }
                        }

                      + resources {
                          + limits   = (known after apply)
                          + requests = {
                              + "cpu"    = "20m"
                              + "memory" = "512Mi"
                            }
                        }

                      + security_context {
                          + allow_privilege_escalation = true
                          + privileged                 = true
                          + read_only_root_filesystem  = false
                        }

                      + volume_mount {
                          + mount_path        = "/var/lib/docker"
                          + mount_propagation = "None"
                          + name              = "docker-graph-storage"
                          + read_only         = false
                        }
                      + volume_mount {
                          + mount_path        = "/var/run"
                          + mount_propagation = "None"
                          + name              = "docker-sock-dir"
                          + read_only         = false
                          + sub_path          = "docker.sock"
                        }
                      + volume_mount {
                          + mount_path        = "/tmp"
                          + mount_propagation = "None"
                          + name              = "tmp-dir"
                          + read_only         = false
                        }
                    }
                  + container {
                      + command                    = [
                          + "supervisord",
                          + "--nodaemon",
                        ]
                      + image                      = "ghcr.io/unity-sds/unity-sps-prototype/hysds-verdi:unity-v0.0.1"
                      + image_pull_policy          = "Always"
                      + name                       = "verdi"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env {
                          + name  = "DOCKER_HOST"
                          + value = "tcp://localhost:2375"
                        }

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/var/run"
                          + mount_propagation = "None"
                          + name              = "docker-sock-dir"
                          + read_only         = false
                          + sub_path          = "docker.sock"
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/hysds/celeryconfig.py"
                          + mount_propagation = "None"
                          + name              = "celeryconfig"
                          + read_only         = false
                          + sub_path          = "celeryconfig.py"
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/datasets.json"
                          + mount_propagation = "None"
                          + name              = "datasets"
                          + read_only         = false
                          + sub_path          = "datasets.json"
                        }
                      + volume_mount {
                          + mount_path        = "/etc/supervisord.conf"
                          + mount_propagation = "None"
                          + name              = "supervisord-verdi"
                          + read_only         = false
                          + sub_path          = "supervisord.conf"
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/.aws/credentials"
                          + mount_propagation = "None"
                          + name              = "aws-credentials"
                          + read_only         = false
                          + sub_path          = "aws-credentials"
                        }
                      + volume_mount {
                          + mount_path        = "/private/tmp/data"
                          + mount_propagation = "None"
                          + name              = "data-work"
                          + read_only         = false
                        }
                      + volume_mount {
                          + mount_path        = "/static-data"
                          + mount_propagation = "None"
                          + name              = "sounder-sips-static-data"
                          + read_only         = false
                        }
                      + volume_mount {
                          + mount_path        = "/src"
                          + mount_propagation = "None"
                          + name              = "src"
                          + read_only         = false
                        }
                      + volume_mount {
                          + mount_path        = "/src/utils"
                          + mount_propagation = "None"
                          + name              = "cwl-workflow-utils"
                          + read_only         = false
                        }
                      + volume_mount {
                          + mount_path        = "/tmp"
                          + mount_propagation = "None"
                          + name              = "tmp-dir"
                          + read_only         = false
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + init_container {
                      + args                       = [
                          + <<-EOT
                                chown -R 1000:1000 /private/tmp/data;
                                cp -r /cwl-src/. /src;
                            EOT,
                        ]
                      + command                    = [
                          + "/bin/sh",
                          + "-c",
                        ]
                      + image                      = "k8s.gcr.io/busybox"
                      + image_pull_policy          = (known after apply)
                      + name                       = "change-ownership"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/private/tmp/data"
                          + mount_propagation = "None"
                          + name              = "data-work"
                          + read_only         = false
                        }
                      + volume_mount {
                          + mount_path        = "/cwl-src"
                          + mount_propagation = "None"
                          + name              = "cwl-workflows"
                          + read_only         = false
                        }
                      + volume_mount {
                          + mount_path        = "/src"
                          + mount_propagation = "None"
                          + name              = "src"
                          + read_only         = false
                        }
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + volume {
                      + name = "celeryconfig"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "celeryconfig"
                        }
                    }
                  + volume {
                      + name = "datasets"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "datasets"
                        }
                    }
                  + volume {
                      + name = "supervisord-verdi"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "supervisord-verdi"
                        }
                    }
                  + volume {
                      + name = "aws-credentials"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "aws-credentials"
                        }
                    }
                  + volume {
                      + name = "data-work"

                      + host_path {
                          + path = "/private/tmp/data"
                        }
                    }
                  + volume {
                      + name = "docker-sock-dir"

                      + empty_dir {}
                    }
                  + volume {
                      + name = "sounder-sips-static-data"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "sounder-sips-static-data"
                        }
                    }
                  + volume {
                      + name = "cwl-workflows"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "cwl-workflows"
                        }
                    }
                  + volume {
                      + name = "cwl-workflow-utils"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "cwl-workflow-utils"
                        }
                    }
                  + volume {
                      + name = "src"

                      + empty_dir {}
                    }
                  + volume {
                      + name = "tmp-dir"

                      + empty_dir {}
                    }
                  + volume {
                      + name = "docker-graph-storage"

                      + empty_dir {}
                    }
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_job.mc will be created
  + resource "kubernetes_job" "mc" {
      + id                  = (known after apply)
      + wait_for_completion = true

      + metadata {
          + generation       = (known after apply)
          + labels           = (known after apply)
          + name             = "mc"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + completion_mode = (known after apply)
          + completions     = 1
          + parallelism     = 1

          + selector {
              + match_labels = (known after apply)

              + match_expressions {
                  + key      = (known after apply)
                  + operator = (known after apply)
                  + values   = (known after apply)
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Never"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + args                       = [
                          + <<-EOT
                                set -x;
                                
                                curl -XGET "http://grq-es:9201/_cluster/health?pretty=true&wait_for_status=yellow&timeout=30s";
                                while [ $$(curl -ILs http://grq2:8878/api/v0.1/doc | tac | grep -m1 HTTP/1.1 | awk {'print $2'}) -ne 200 ]; do
                                  echo "Waiting for GRQ2 to be ready..." && sleep 5;
                                done;
                                
                                while [ $$(curl -sw '%{http_code}' "http://grq-es:9201" -o /dev/null) -ne 200 ]; do
                                  echo "Waiting for grq-es to be ready..." && sleep 5;
                                done;
                                
                                curl -XGET "http://mozart-es:9200/_cluster/health?pretty=true&wait_for_status=yellow&timeout=30s";
                                while [ $$(curl -ILs http://mozart:8888/api/v0.1/doc | tac | grep -m1 HTTP/1.1 | awk {'print $2'}) -ne 200 ]; do
                                  echo "Waiting for mozart to be ready..." && sleep 5;
                                done;
                                
                                while [ $$(curl -sw '%{http_code}' "http://mozart-es:9200" -o /dev/null) -ne 200 ]; do
                                  echo "Waiting for mozart-es to be ready..." && sleep 5;
                                done;
                                
                                cd /home/ops/hysds/test/examples;
                                /home/ops/hysds/scripts/ingest_dataset.py AOI_sacramento_valley /home/ops/datasets.json;
                            EOT,
                        ]
                      + command                    = [
                          + "/bin/sh",
                          + "-c",
                        ]
                      + image                      = "ghcr.io/unity-sds/unity-sps-prototype/hysds-core:unity-v0.0.1"
                      + image_pull_policy          = (known after apply)
                      + name                       = "publish-aoi"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/home/ops/hysds/celeryconfig.py"
                          + mount_propagation = "None"
                          + name              = "celeryconfig"
                          + read_only         = false
                          + sub_path          = "celeryconfig.py"
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/.aws/credentials"
                          + mount_propagation = "None"
                          + name              = "aws-credentials"
                          + read_only         = false
                          + sub_path          = "aws-credentials"
                        }
                      + volume_mount {
                          + mount_path        = "/home/ops/datasets.json"
                          + mount_propagation = "None"
                          + name              = "datasets"
                          + read_only         = false
                          + sub_path          = "datasets.json"
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + init_container {
                      + args                       = [
                          + <<-EOT
                                until curl -s -I http://minio:9000; do echo "(Minio server) waiting..."; sleep 2; done;
                                until curl -s -I http://minio:9001; do echo "(Minio client) waiting..."; sleep 2; done;
                                while [ $$(curl -sw '%{http_code}' "http://minio:9000/minio/health/live" -o /dev/null) -ne 200 ]; do
                                  echo "Waiting for minio health live to be ready..." && sleep 5;
                                done;
                                mc alias set s3 http://minio:9000 hysds password;
                                mc mb s3/datasets;
                                mc policy set public s3/datasets;
                            EOT,
                        ]
                      + command                    = [
                          + "/bin/sh",
                          + "-c",
                        ]
                      + image                      = "minio/mc:RELEASE.2022-03-13T22-34-00Z"
                      + image_pull_policy          = (known after apply)
                      + name                       = "minio-setup"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + volume {
                      + name = "celeryconfig"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "celeryconfig"
                        }
                    }
                  + volume {
                      + name = "aws-credentials"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "aws-credentials"
                        }
                    }
                  + volume {
                      + name = "datasets"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "datasets"
                        }
                    }
                }
            }
        }

      + timeouts {
          + create = "5m"
          + update = "5m"
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_namespace.unity-sps will be created
  + resource "kubernetes_namespace" "unity-sps" {
      + id = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim will be created
  + resource "kubernetes_persistent_volume_claim" "ades-wpst-sqlite-pv-claim" {
      + id               = (known after apply)
      + wait_until_bound = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "ades-wpst-sqlite-storage-claim"
            }
          + name             = "ades-wpst-sqlite-pv-claim"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + access_modes       = [
              + "ReadWriteOnce",
            ]
          + storage_class_name = (known after apply)
          + volume_name        = (known after apply)

          + resources {
              + requests = {
                  + "storage" = "20Gi"
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim will be created
  + resource "kubernetes_persistent_volume_claim" "minio-pv-claim" {
      + id               = (known after apply)
      + wait_until_bound = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "minio-storage-claim"
            }
          + name             = "minio-pv-claim"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + access_modes       = [
              + "ReadWriteOnce",
            ]
          + storage_class_name = (known after apply)
          + volume_name        = (known after apply)

          + resources {
              + requests = {
                  + "storage" = "20Gi"
                }
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_service.ades-wpst-api_service will be created
  + resource "kubernetes_service" "ades-wpst-api_service" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + name             = "ades-wpst-api"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + cluster_ip                  = (known after apply)
          + external_traffic_policy     = (known after apply)
          + health_check_node_port      = (known after apply)
          + ip_families                 = (known after apply)
          + ip_family_policy            = (known after apply)
          + publish_not_ready_addresses = false
          + selector                    = {
              + "app" = "ades-wpst-api"
            }
          + session_affinity            = "None"
          + type                        = "LoadBalancer"

          + port {
              + node_port   = (known after apply)
              + port        = 5001
              + protocol    = "TCP"
              + target_port = "5000"
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_service.grq2_service will be created
  + resource "kubernetes_service" "grq2_service" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + name             = "grq2"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + cluster_ip                  = (known after apply)
          + external_traffic_policy     = (known after apply)
          + health_check_node_port      = (known after apply)
          + ip_families                 = (known after apply)
          + ip_family_policy            = (known after apply)
          + publish_not_ready_addresses = false
          + selector                    = {
              + "app" = "grq2"
            }
          + session_affinity            = "None"
          + type                        = "LoadBalancer"

          + port {
              + node_port   = (known after apply)
              + port        = 8878
              + protocol    = "TCP"
              + target_port = "8878"
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_service.hysds-ui_service will be created
  + resource "kubernetes_service" "hysds-ui_service" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + name             = "hysds-ui"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + cluster_ip                  = (known after apply)
          + external_traffic_policy     = (known after apply)
          + health_check_node_port      = (known after apply)
          + ip_families                 = (known after apply)
          + ip_family_policy            = (known after apply)
          + publish_not_ready_addresses = false
          + selector                    = {
              + "app" = "hysds-ui"
            }
          + session_affinity            = "None"
          + type                        = "LoadBalancer"

          + port {
              + node_port   = (known after apply)
              + port        = 3000
              + protocol    = "TCP"
              + target_port = "80"
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_service.minio_service will be created
  + resource "kubernetes_service" "minio_service" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + name             = "minio"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + cluster_ip                  = (known after apply)
          + external_traffic_policy     = (known after apply)
          + health_check_node_port      = (known after apply)
          + ip_families                 = (known after apply)
          + ip_family_policy            = (known after apply)
          + publish_not_ready_addresses = false
          + selector                    = {
              + "app" = "minio"
            }
          + session_affinity            = "None"
          + type                        = "LoadBalancer"

          + port {
              + name        = "minio-api"
              + node_port   = (known after apply)
              + port        = 9000
              + protocol    = "TCP"
              + target_port = "9000"
            }
          + port {
              + name        = "minio-interface"
              + node_port   = (known after apply)
              + port        = 9001
              + protocol    = "TCP"
              + target_port = (known after apply)
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_service.mozart_service will be created
  + resource "kubernetes_service" "mozart_service" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + name             = "mozart"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + cluster_ip                  = (known after apply)
          + external_traffic_policy     = (known after apply)
          + health_check_node_port      = (known after apply)
          + ip_families                 = (known after apply)
          + ip_family_policy            = (known after apply)
          + publish_not_ready_addresses = false
          + selector                    = {
              + "app" = "mozart"
            }
          + session_affinity            = "None"
          + type                        = "LoadBalancer"

          + port {
              + node_port   = (known after apply)
              + port        = 8888
              + protocol    = "TCP"
              + target_port = "8888"
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_service.rabbitmq_mgmt_service will be created
  + resource "kubernetes_service" "rabbitmq_mgmt_service" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + name             = "rabbitmq-mgmt"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + cluster_ip                  = (known after apply)
          + external_traffic_policy     = (known after apply)
          + health_check_node_port      = (known after apply)
          + ip_families                 = (known after apply)
          + ip_family_policy            = (known after apply)
          + publish_not_ready_addresses = false
          + selector                    = {
              + "app" = "rabbitmq"
            }
          + session_affinity            = "None"
          + type                        = "LoadBalancer"

          + port {
              + name        = "cluster-rpc"
              + node_port   = (known after apply)
              + port        = 15672
              + protocol    = "TCP"
              + target_port = "15672"
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_service.rabbitmq_service will be created
  + resource "kubernetes_service" "rabbitmq_service" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + name             = "rabbitmq"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + cluster_ip                  = (known after apply)
          + external_traffic_policy     = (known after apply)
          + health_check_node_port      = (known after apply)
          + ip_families                 = (known after apply)
          + ip_family_policy            = (known after apply)
          + publish_not_ready_addresses = false
          + selector                    = {
              + "app" = "rabbitmq"
            }
          + session_affinity            = "None"
          + type                        = "NodePort"

          + port {
              + name        = "epmd"
              + node_port   = (known after apply)
              + port        = 4369
              + protocol    = "TCP"
              + target_port = "4369"
            }
          + port {
              + name        = "listener"
              + node_port   = (known after apply)
              + port        = 5672
              + protocol    = "TCP"
              + target_port = "5672"
            }
          + port {
              + name        = "cluster-rpc"
              + node_port   = (known after apply)
              + port        = 15672
              + protocol    = "TCP"
              + target_port = "15672"
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_service.redis_service will be created
  + resource "kubernetes_service" "redis_service" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + name             = "redis"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + cluster_ip                  = (known after apply)
          + external_traffic_policy     = (known after apply)
          + health_check_node_port      = (known after apply)
          + ip_families                 = (known after apply)
          + ip_family_policy            = (known after apply)
          + publish_not_ready_addresses = false
          + selector                    = {
              + "app" = "redis"
            }
          + session_affinity            = "None"
          + type                        = "LoadBalancer"

          + port {
              + node_port   = (known after apply)
              + port        = 6379
              + protocol    = "TCP"
              + target_port = "6379"
            }
        }
    }

  # module.unity-sps-hysds-cluster.kubernetes_stateful_set.rabbitmq_statefulset will be created
  + resource "kubernetes_stateful_set" "rabbitmq_statefulset" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + name             = "rabbitmq"
          + namespace        = "unity-sps"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + pod_management_policy  = (known after apply)
          + replicas               = (known after apply)
          + revision_history_limit = (known after apply)
          + service_name           = "rabbitmq"

          + selector {
              + match_labels = {
                  + "app" = "rabbitmq"
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "rabbitmq"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }

              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "rabbitmq:3-management"
                      + image_pull_policy          = (known after apply)
                      + name                       = "rabbitmq"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env {
                          + name  = "RABBITMQ_ERLANG_COOKIE"
                          + value = "1WqgH8N2v1qDBDZDbNy8Bg9IkPWLEpu79m6q+0t36lQ="
                        }

                      + resources {
                          + limits   = (known after apply)
                          + requests = (known after apply)
                        }

                      + volume_mount {
                          + mount_path        = "/var/lib/rabbitmq"
                          + mount_propagation = "None"
                          + name              = "rabbitmq-data"
                          + read_only         = false
                        }
                    }

                  + image_pull_secrets {
                      + name = (known after apply)
                    }

                  + readiness_gate {
                      + condition_type = (known after apply)
                    }

                  + volume {
                      + name = "rabbitmq-data"

                      + host_path {
                          + path = "/data/rabbitmq"
                          + type = "DirectoryOrCreate"
                        }
                    }
                }
            }
        }
    }

Plan: 40 to add, 0 to change, 0 to destroy.
module.unity-sps-hysds-cluster.kubernetes_namespace.unity-sps: Creating...
module.unity-sps-hysds-cluster.kubernetes_namespace.unity-sps: Creation complete after 1s [id=unity-sps]
module.unity-sps-hysds-cluster.kubernetes_config_map.grq2-settings: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.supervisord-user-rules: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.supervisord-job-worker: Creating...
module.unity-sps-hysds-cluster.kubernetes_service.mozart_service: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.supervisord-orchestrator: Creating...
module.unity-sps-hysds-cluster.kubernetes_service.redis_service: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.cwl-workflows: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.cwl-workflow-utils: Creating...
module.unity-sps-hysds-cluster.kubernetes_deployment.hysds-ui: Creating...
module.unity-sps-hysds-cluster.helm_release.mozart-es: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.supervisord-job-worker: Creation complete after 1s [id=unity-sps/supervisord-job-worker]
module.unity-sps-hysds-cluster.kubernetes_config_map.grq2-settings: Creation complete after 1s [id=unity-sps/grq2-settings]
module.unity-sps-hysds-cluster.kubernetes_config_map.supervisord-orchestrator: Creation complete after 1s [id=unity-sps/supervisord-orchestrator]
module.unity-sps-hysds-cluster.kubernetes_config_map.supervisord-user-rules: Creation complete after 1s [id=unity-sps/supervisord-user-rules]
module.unity-sps-hysds-cluster.kubernetes_service.minio_service: Creating...
module.unity-sps-hysds-cluster.kubernetes_service.rabbitmq_mgmt_service: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.celeryconfig: Creating...
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.cwl-workflows: Creation complete after 1s [id=unity-sps/cwl-workflows]
module.unity-sps-hysds-cluster.kubernetes_service.rabbitmq_service: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.cwl-workflow-utils: Creation complete after 2s [id=unity-sps/cwl-workflow-utils]
module.unity-sps-hysds-cluster.kubernetes_service.grq2_service: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.celeryconfig: Creation complete after 1s [id=unity-sps/celeryconfig]
module.unity-sps-hysds-cluster.kubernetes_config_map.logstash-configs: Creating...
module.unity-sps-hysds-cluster.kubernetes_service.rabbitmq_service: Creation complete after 1s [id=unity-sps/rabbitmq]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.logstash-configs: Creation complete after 1s [id=unity-sps/logstash-configs]
module.unity-sps-hysds-cluster.kubernetes_stateful_set.rabbitmq_statefulset: Creating...
module.unity-sps-hysds-cluster.kubernetes_service.mozart_service: Creation complete after 5s [id=unity-sps/mozart]
module.unity-sps-hysds-cluster.kubernetes_config_map.netrc: Creating...
module.unity-sps-hysds-cluster.kubernetes_service.redis_service: Creation complete after 5s [id=unity-sps/redis]
module.unity-sps-hysds-cluster.kubernetes_deployment.hysds-ui: Creation complete after 5s [id=unity-sps/hysds-ui]
module.unity-sps-hysds-cluster.kubernetes_service.hysds-ui_service: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.mozart-settings: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.netrc: Creation complete after 1s [id=unity-sps/netrc]
module.unity-sps-hysds-cluster.kubernetes_service.ades-wpst-api_service: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.mozart-settings: Creation complete after 1s [id=unity-sps/mozart-settings]
module.unity-sps-hysds-cluster.kubernetes_config_map.sounder-sips-static-data: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.sounder-sips-static-data: Creation complete after 1s [id=unity-sps/sounder-sips-static-data]
module.unity-sps-hysds-cluster.kubernetes_config_map.aws-credentials: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.aws-credentials: Creation complete after 1s [id=unity-sps/aws-credentials]
module.unity-sps-hysds-cluster.kubernetes_stateful_set.rabbitmq_statefulset: Creation complete after 5s [id=unity-sps/rabbitmq]
module.unity-sps-hysds-cluster.kubernetes_deployment.redis: Creating...
module.unity-sps-hysds-cluster.helm_release.grq2-es: Creating...
module.unity-sps-hysds-cluster.kubernetes_service.minio_service: Creation complete after 9s [id=unity-sps/minio]
module.unity-sps-hysds-cluster.kubernetes_service.rabbitmq_mgmt_service: Creation complete after 9s [id=unity-sps/rabbitmq-mgmt]
module.unity-sps-hysds-cluster.kubernetes_config_map.supervisord-verdi: Creating...
module.unity-sps-hysds-cluster.kubernetes_config_map.datasets: Creating...
module.unity-sps-hysds-cluster.kubernetes_service.grq2_service: Creation complete after 8s [id=unity-sps/grq2]
module.unity-sps-hysds-cluster.kubernetes_deployment.orchestrator: Creating...
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [10s elapsed]
module.unity-sps-hysds-cluster.kubernetes_config_map.datasets: Creation complete after 1s [id=unity-sps/datasets]
module.unity-sps-hysds-cluster.kubernetes_config_map.supervisord-verdi: Creation complete after 1s [id=unity-sps/supervisord-verdi]
module.unity-sps-hysds-cluster.kubernetes_deployment.user-rules: Creating...
module.unity-sps-hysds-cluster.kubernetes_deployment.logstash: Creating...
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [10s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [10s elapsed]
module.unity-sps-hysds-cluster.kubernetes_deployment.redis: Creation complete after 5s [id=unity-sps/redis]
module.unity-sps-hysds-cluster.kubernetes_deployment.grq2: Creating...
module.unity-sps-hysds-cluster.kubernetes_service.hysds-ui_service: Creation complete after 9s [id=unity-sps/hysds-ui]
module.unity-sps-hysds-cluster.kubernetes_deployment.mozart: Creating...
module.unity-sps-hysds-cluster.kubernetes_service.ades-wpst-api_service: Creation complete after 8s [id=unity-sps/ades-wpst-api]
module.unity-sps-hysds-cluster.kubernetes_deployment.factotum-job-worker: Creating...
module.unity-sps-hysds-cluster.kubernetes_deployment.orchestrator: Creation complete after 5s [id=unity-sps/orchestrator]
module.unity-sps-hysds-cluster.kubernetes_deployment.verdi: Creating...
module.unity-sps-hysds-cluster.kubernetes_deployment.user-rules: Creation complete after 4s [id=unity-sps/user-rules]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [10s elapsed]
module.unity-sps-hysds-cluster.kubernetes_deployment.logstash: Creation complete after 9s [id=unity-sps/logstash]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [20s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [20s elapsed]
module.unity-sps-hysds-cluster.kubernetes_deployment.grq2: Creation complete after 8s [id=unity-sps/grq2]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [20s elapsed]
module.unity-sps-hysds-cluster.kubernetes_deployment.mozart: Creation complete after 9s [id=unity-sps/mozart]
module.unity-sps-hysds-cluster.kubernetes_deployment.factotum-job-worker: Creation complete after 9s [id=unity-sps/factotum-job-worker]
module.unity-sps-hysds-cluster.kubernetes_deployment.verdi: Still creating... [10s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [20s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [30s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [30s elapsed]
module.unity-sps-hysds-cluster.kubernetes_deployment.verdi: Creation complete after 17s [id=unity-sps/verdi]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [30s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [30s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [40s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [40s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [40s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [40s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [50s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [50s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [50s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [50s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [1m0s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [1m0s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [1m0s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [1m0s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [1m10s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [1m10s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [1m10s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [1m10s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [1m20s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [1m20s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [1m20s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [1m20s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [1m30s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [1m30s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [1m30s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [1m30s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [1m40s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [1m40s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [1m40s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [1m40s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [1m50s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [1m50s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [1m50s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [1m50s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [2m0s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [2m0s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [2m0s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [2m0s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [2m10s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [2m10s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [2m10s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [2m10s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [2m20s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [2m20s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [2m20s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [2m20s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [2m30s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [2m30s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [2m30s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [2m30s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [2m40s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [2m40s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [2m40s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [2m40s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [2m50s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [2m50s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [2m50s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [2m50s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [3m0s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [3m0s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [3m0s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [3m0s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [3m10s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [3m10s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [3m10s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [3m10s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [3m20s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [3m20s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [3m20s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [3m20s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [3m30s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [3m30s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [3m30s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [3m30s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [3m40s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [3m40s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [3m40s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [3m40s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [3m50s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [3m50s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [3m50s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [3m50s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [4m0s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [4m0s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [4m0s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [4m0s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [4m10s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [4m10s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [4m10s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [4m10s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [4m20s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [4m20s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [4m20s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [4m20s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [4m30s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [4m30s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [4m30s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [4m30s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [4m40s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [4m40s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [4m40s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [4m40s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [4m50s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [4m50s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [4m50s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [4m50s elapsed]
module.unity-sps-hysds-cluster.helm_release.mozart-es: Still creating... [5m0s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim: Still creating... [5m0s elapsed]
module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim: Still creating... [5m0s elapsed]
module.unity-sps-hysds-cluster.helm_release.grq2-es: Still creating... [5m0s elapsed]

Warning: Helm release "mozart-es" was created but has a failed status. Use the `helm` command to investigate the error, correct it, then run Terraform again.

  with module.unity-sps-hysds-cluster.helm_release.mozart-es,
  on ../terraform_modules/terraform-unity-sps-hysds-cluster/elastic.tf line 175, in resource "helm_release" "mozart-es":
 175: resource "helm_release" "mozart-es" {


Warning: Helm release "grq2-es" was created but has a failed status. Use the `helm` command to investigate the error, correct it, then run Terraform again.

  with module.unity-sps-hysds-cluster.helm_release.grq2-es,
  on ../terraform_modules/terraform-unity-sps-hysds-cluster/elastic.tf line 194, in resource "helm_release" "grq2-es":
 194: resource "helm_release" "grq2-es" {


Error: context deadline exceeded

  with module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.ades-wpst-sqlite-pv-claim,
  on ../terraform_modules/terraform-unity-sps-hysds-cluster/ades_wpst.tf line 2, in resource "kubernetes_persistent_volume_claim" "ades-wpst-sqlite-pv-claim":
   2: resource "kubernetes_persistent_volume_claim" "ades-wpst-sqlite-pv-claim" {


Error: timed out waiting for the condition

  with module.unity-sps-hysds-cluster.helm_release.mozart-es,
  on ../terraform_modules/terraform-unity-sps-hysds-cluster/elastic.tf line 175, in resource "helm_release" "mozart-es":
 175: resource "helm_release" "mozart-es" {


Error: timed out waiting for the condition

  with module.unity-sps-hysds-cluster.helm_release.grq2-es,
  on ../terraform_modules/terraform-unity-sps-hysds-cluster/elastic.tf line 194, in resource "helm_release" "grq2-es":
 194: resource "helm_release" "grq2-es" {


Error: context deadline exceeded

  with module.unity-sps-hysds-cluster.kubernetes_persistent_volume_claim.minio-pv-claim,
  on ../terraform_modules/terraform-unity-sps-hysds-cluster/minio.tf line 1, in resource "kubernetes_persistent_volume_claim" "minio-pv-claim":
   1: resource "kubernetes_persistent_volume_claim" "minio-pv-claim" {

